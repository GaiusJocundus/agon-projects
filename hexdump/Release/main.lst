Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED11-Jun-23     21:44:53     page:   1


PC     Object              I  Line    Source 
                           A     1    ; HEXDUMP utility
                           A     2    ;
                           A     3    ;
                           A     4    ; Written Agon native by Shawn Sijnstra
                           A     5    ;
                           A     6    ; Notable changes for reference:
                           A     7    ; required colons on all labels
                           A     8    ; labels are case sensitive
                           A     9    ; code is a reserved word and can't be used as 
                           A    10    ; numeric evaluations are done differently - ch
                           A    11    ; reserved word INCLUDE needs to be in upper ca
                           A    12    ; assembly source MUST be .asm, can't use e.g. 
                           A    13    ; supports defb as a synonym for db, but NOT de
                           A    14    ; labels can't start with @
                           A    15    ;
                           A    16    ; DESIGN OF WIDTH:
                           A    17    ; 6 chars for current byte
                           A    18    ; dddddd: XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX |
                           A    19    
                           A    20    
                           A    21    			.ASSUME	ADL = 0				
                           A    22    
                           B     0    			INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	Memory Dump - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/11/2022
                           B     5    ; Last Updated:	15/11/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    				
       0000FF00            B     9    RAM_Top:		EQU		0FF00h
       00000000            B    10    Stack_Top:		EQU		00000h	; Stack at top
                           B    11    	
                           B    12    ; For GPIO
                           B    13    ; PA not available on eZ80L92
                           B    14    ;
       00000096            B    15    PA_DR:			EQU		96h
       00000097            B    16    PA_DDR:			EQU		97h
       00000098            B    17    PA_ALT1:		EQU		98h
       00000099            B    18    PA_ALT2:		EQU		99h
       0000009A            B    19    PB_DR:          	EQU		9Ah
       0000009B            B    20    PB_DDR:        	 	EQU		9Bh
       0000009C            B    21    PB_ALT1:        	EQU		9Ch
       0000009D            B    22    PB_ALT2:        	EQU		9Dh
       0000009E            B    23    PC_DR:          	EQU		9Eh
       0000009F            B    24    PC_DDR:         	EQU		9Fh
       000000A0            B    25    PC_ALT1:        	EQU		A0h
       000000A1            B    26    PC_ALT2:        	EQU		A1h
       000000A2            B    27    PD_DR:          	EQU		A2h
       000000A3            B    28    PD_DDR:			EQU		A3h
       000000A4            B    29    PD_ALT1:		EQU		A4h
       000000A5            B    30    PD_ALT2:		EQU		A5h
                           B    31    	
       00000000            B    32    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    33    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    34    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    35    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    36    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    37    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    38    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    39    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    40    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    41    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    42    	
                           B    43    ; For serial.asm
                           B    44    ; 
       016E3600            B    45    BASE_CLOCK		EQU	24000000	; It's actually
                           B    46    
       00000003            B    47    BAUD_500000		EQU	BASE_CLOCK / (16 * 500000)
       00000006            B    48    BAUD_250000		EQU	BASE_CLOCK / (16 * 250000)
       0000000C            B    49    BAUD_125000		EQU	BASE_CLOCK / (16 * 125000)
       0000004E            B    50    BAUD_19200		EQU	BASE_CLOCK / (16 * 19200)	
                           B    51    
                           B    52    ; For interrupts.asm
                           B    53    ;
                           B    54    
                           B    55    ;UARTs
                           B    56    ;
       00000018            B    57    UART0_IVECT		EQU		18h
       0000001A            B    58    UART1_IVECT		EQU		1Ah
                           B    59    
                           B    60    ;Ports
                           B    61    ;
       00000030            B    62    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    63    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    64    PB2_IVECT  	  	EQU   	34h
       00000036            B    65    PB3_IVECT  	  	EQU   	36h
       00000038            B    66    PB4_IVECT    		EQU   	38h
       0000003A            B    67    PB5_IVECT    		EQU   	3Ah
       0000003C            B    68    PB6_IVECT    		EQU   	3Ch
       0000003E            B    69    PB7_IVECT    		EQU   	3Eh
                           B    70                           
       00000040            B    71    PC0_IVECT    		EQU   	40h
       00000042            B    72    PC1_IVECT    		EQU   	42h
       00000044            B    73    PC2_IVECT    		EQU   	44h
       00000046            B    74    PC3_IVECT    		EQU   	46h
       00000048            B    75    PC4_IVECT    		EQU   	48h
       0000004A            B    76    PC5_IVECT    		EQU   	4Ah
       0000004C            B    77    PC6_IVECT    		EQU   	4Ch
       0000004E            B    78    PC7_IVECT    		EQU   	4Eh
                           B    79                           
       00000050            B    80    PD0_IVECT    		EQU   	50h
       00000052            B    81    PD1_IVECT    		EQU   	52h
       00000054            B    82    PD2_IVECT    		EQU   	54h
       00000056            B    83    PD3_IVECT    		EQU   	56h
       00000058            B    84    PD4_IVECT    		EQU   	58h
       0000005A            B    85    PD5_IVECT    		EQU   	5Ah
       0000005C            B    86    PD6_IVECT    		EQU   	5Ch
       0000005E            B    87    PD7_IVECT    		EQU   	5Eh
                           B    88    
                           B    89    ; Originally in main.asm
                           B    90    ;
       0000000D            B    91    CR:			EQU     0DH
       0000000A            B    92    LF:			EQU     0AH
       0000001B            B    93    ESC:			EQU     1BH
                           B     0    			INCLUDE "mos_api.inc"	; In MOS/sr
                           B     1    ;
                           B     2    ; Title:	AGON MOS - API for user projects
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	03/08/2022
                           B     5    ; Last Updated:	15/04/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 05/08/2022:	Added mos_feof
                           B     9    ; 09/08/2022:	Added system variables: cursorX
                           B    10    ; 18/08/2022:	Added system variables: scrchar
                           B    11    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
                           B    12    ; 24/09/2022:	Added mos_getError, mos_mkdir
                           B    13    ; 13/10/2022:	Added mos_oscli
                           B    14    ; 23/02/2023:	Added more sysvars, fixed typo 
                           B    15    ; 04/03/2023:	Added sysvar_scrpixelIndex
                           B    16    ; 08/03/2023:	Renamed sysvar_keycode to sysva
                           B    17    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos
                           B    18    ; 21/03/2023:	Added mos_setintvector, sysvars
                           B    19    ; 22/03/2023:	The VDP commands are now indexe
                           B    20    ; 29/03/2023:	Added mos_uopen, mos_uclose, mo
                           B    21    ; 13/04/2023:	Added FatFS file structures (FF
                           B    22    ; 15/04/2023:	Added mos_getfil, mos_fread, mo
                           B    23    
                           B    24    ; VDP control (VDU 23, 0, n)
                           B    25    ;
       00000080            B    26    vdp_gp:			EQU 	80h
       00000081            B    27    vdp_keycode:		EQU 	81h
       00000082            B    28    vdp_cursor:		EQU	82h
       00000083            B    29    vdp_scrchar:		EQU	83h
       00000084            B    30    vdp_scrpixel:		EQU	84h
       00000085            B    31    vdp_audio:		EQU	85h
       00000086            B    32    vdp_mode:		EQU	86h
       00000087            B    33    vdp_rtc:		EQU	87h
       00000088            B    34    vdp_keystate:		EQU	88h
       000000C0            B    35    vdp_logicalcoords:	EQU	C0h
       000000FF            B    36    vdp_terminalmode:	EQU	FFh
                           B    37    
                           B    38    ; MOS high level functions
                           B    39    ;
       00000000            B    40    mos_getkey:		EQU	00h
       00000001            B    41    mos_load:		EQU	01h
       00000002            B    42    mos_save:		EQU	02h
       00000003            B    43    mos_cd:			EQU	03h
       00000004            B    44    mos_dir:		EQU	04h
       00000005            B    45    mos_del:		EQU	05h
       00000006            B    46    mos_ren:		EQU	06h
       00000007            B    47    mos_mkdir:		EQU	07h
       00000008            B    48    mos_sysvars:		EQU	08h
       00000009            B    49    mos_editline:		EQU	09h
       0000000A            B    50    mos_fopen:		EQU	0Ah
       0000000B            B    51    mos_fclose:		EQU	0Bh
       0000000C            B    52    mos_fgetc:		EQU	0Ch
       0000000D            B    53    mos_fputc:		EQU	0Dh
       0000000E            B    54    mos_feof:		EQU	0Eh
       0000000F            B    55    mos_getError:		EQU	0Fh
       00000010            B    56    mos_oscli:		EQU	10h
       00000011            B    57    mos_copy:		EQU	11h
       00000012            B    58    mos_getrtc:		EQU	12h
       00000013            B    59    mos_setrtc:		EQU	13h
       00000014            B    60    mos_setintvector:	EQU	14h
       00000015            B    61    mos_uopen:		EQU	15h
       00000016            B    62    mos_uclose:		EQU	16h
       00000017            B    63    mos_ugetc:		EQU	17h
       00000018            B    64    mos_uputc:		EQU 	18h
       00000019            B    65    mos_getfil:		EQU	19h
       0000001A            B    66    mos_fread:		EQU	1Ah
       0000001B            B    67    mos_fwrite:		EQU	1Bh
       0000001C            B    68    mos_flseek:		EQU	1Ch
                           B    69    
                           B    70    ; FatFS file access functions
                           B    71    ;
       00000080            B    72    ffs_fopen:		EQU	80h
       00000081            B    73    ffs_fclose:		EQU	81h
       00000082            B    74    ffs_fread:		EQU	82h
       00000083            B    75    ffs_fwrite:		EQU	83h
       00000084            B    76    ffs_flseek:		EQU	84h
       00000085            B    77    ffs_ftruncate:		EQU	85h
       00000086            B    78    ffs_fsync:		EQU	86h
       00000087            B    79    ffs_fforward:		EQU	87h
       00000088            B    80    ffs_fexpand:		EQU	88h
       00000089            B    81    ffs_fgets:		EQU	89h
       0000008A            B    82    ffs_fputc:		EQU	8Ah
       0000008B            B    83    ffs_fputs:		EQU	8Bh
       0000008C            B    84    ffs_fprintf:		EQU	8Ch
       0000008D            B    85    ffs_ftell:		EQU	8Dh
       0000008E            B    86    ffs_feof:		EQU	8Eh
       0000008F            B    87    ffs_fsize:		EQU	8Fh
       00000090            B    88    ffs_ferror:		EQU	90h
                           B    89    
                           B    90    ; FatFS directory access functions
                           B    91    ;
       00000091            B    92    ffs_dopen:		EQU	91h
       00000092            B    93    ffs_dclose:		EQU	92h
       00000093            B    94    ffs_dread:		EQU	93h
       00000094            B    95    ffs_dfindfirst:		EQU	94h
       00000095            B    96    ffs_dfindnext:		EQU	95h
                           B    97    
                           B    98    ; FatFS file and directory management functions
                           B    99    ;
       00000096            B   100    ffs_stat:		EQU	96h
       00000097            B   101    ffs_unlink:		EQU	97h
       00000098            B   102    ffs_rename:		EQU	98h
       00000099            B   103    ffs_chmod:		EQU	99h
       0000009A            B   104    ffs_utime:		EQU	9Ah
       0000009B            B   105    ffs_mkdir:		EQU	9Bh
       0000009C            B   106    ffs_chdir:		EQU	9Ch
       0000009D            B   107    ffs_chdrive:		EQU	9Dh
       0000009E            B   108    ffs_getcwd:		EQU	9Eh
                           B   109    
                           B   110    ; FatFS volume management and system configurat
                           B   111    ;
       0000009F            B   112    ffs_mount:		EQU	9Fh
       000000A0            B   113    ffs_mkfs:		EQU	A0h
       000000A1            B   114    ffs_fdisk		EQU	A1h
       000000A2            B   115    ffs_getfree:		EQU	A2h
       000000A3            B   116    ffs_getlabel:		EQU	A3h
       000000A4            B   117    ffs_setlabel:		EQU	A4h
       000000A5            B   118    ffs_setcp:		EQU	A5h
                           B   119    	
                           B   120    ; File access modes
                           B   121    ;
       00000001            B   122    fa_read:		EQU	01h
       00000002            B   123    fa_write:		EQU	02h
       00000000            B   124    fa_open_existing:	EQU	00h
       00000004            B   125    fa_create_new:		EQU	04h
       00000008            B   126    fa_create_always:	EQU	08h
       00000010            B   127    fa_open_always:		EQU	10h
       00000030            B   128    fa_open_append:		EQU	30h
                           B   129    	
                           B   130    ; System variable indexes for api_sysvars
                           B   131    ; Index into _sysvars in globals.asm
                           B   132    ;
       00000000            B   133    sysvar_time:		EQU	00h	; 4: Clock timer in
       00000004            B   134    sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indic
       00000005            B   135    sysvar_keyascii:	EQU	05h	; 1: ASCII keycode,
       00000006            B   136    sysvar_keymods:		EQU	06h	; 1: Keycode modifi
       00000007            B   137    sysvar_cursorX:		EQU	07h	; 1: Cursor X posit
       00000008            B   138    sysvar_cursorY:		EQU	08h	; 1: Cursor Y posit
       00000009            B   139    sysvar_scrchar:		EQU	09h	; 1: Character read
       0000000A            B   140    sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data rea
       0000000D            B   141    sysvar_audioChannel:	EQU	0Dh	; 1: Audio chan
       0000000E            B   142    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio chan
       0000000F            B   143    sysvar_scrWidth:	EQU	0Fh	; 2: Screen width i
       00000011            B   144    sysvar_scrHeight:	EQU	11h	; 2: Screen height 
       00000013            B   145    sysvar_scrCols:		EQU	13h	; 1: Screen columns
       00000014            B   146    sysvar_scrRows:		EQU	14h	; 1: Screen rows in
       00000015            B   147    sysvar_scrColours:	EQU	15h	; 1: Number of colo
       00000016            B   148    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of p
       00000017            B   149    sysvar_vkeycode:	EQU	17h	; 1: Virtual key co
       00000018            B   150    sysvar_vkeydown		EQU	18h	; 1: Virtual key st
       00000019            B   151    sysvar_vkeycount:	EQU	19h	; 1: Incremented ev
       0000001A            B   152    sysvar_rtc:		EQU	1Ah	; 8: Real time clock da
       00000022            B   153    sysvar_keydelay:	EQU	22h	; 2: Keyboard repea
       00000024            B   154    sysvar_keyrate:		EQU	24h	; 2: Keyboard repea
       00000026            B   155    sysvar_keyled:		EQU	26h	; 1: Keyboard LED s
                           B   156    	
                           B   157    ; Flags for the VPD protocol
                           B   158    ;
       00000001            B   159    vdp_pflag_cursor:	EQU	00000001b
       00000002            B   160    vdp_pflag_scrchar:	EQU	00000010b
       00000004            B   161    vdp_pflag_point:	EQU	00000100b
       00000008            B   162    vdp_pflag_audio:	EQU	00001000b
       00000010            B   163    vdp_pflag_mode:		EQU	00010000b
       00000020            B   164    vdp_pflag_rtc:		EQU	00100000b
                           B   165    
                           B   166    ;
                           B   167    ; FatFS structures
                           B   168    ; These mirror the structures contained in src_
                           B   169    ;
                           B   170    ; Object ID and allocation information (FFOBJID
                           B   171    ;
                           B   172    FFOBJID	.STRUCT
000000                     B   173    	fs:		DS	3	; Pointer to the hosting vo
000003                     B   174    	id:		DS	2	; Hosting volume mount ID
000005                     B   175    	attr:		DS	1	; Object attribute
000006                     B   176    	stat:		DS	1	; Object chain status (
000007                     B   177    	sclust:		DS	4	; Object data start clu
00000B                     B   178    	objsize:	DS	4	; Object size (valid wh
       0000000F            B   179    FFOBJID_SIZE .ENDSTRUCT FFOBJID
                           B   180    ;
                           B   181    ; File object structure (FIL)
                           B   182    ;
                           B   183    FIL .STRUCT
000000                     B   184    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   185    	flag:		DS	1	; File status flags
000010                     B   186    	err:		DS	1	; Abort flag (error cod
000011                     B   187    	fptr:		DS	4	; File read/write point
000015                     B   188    	clust:		DS	4	; Current cluster of fp
000019                     B   189    	sect:		DS	4	; Sector number appeari
00001D                     B   190    	dir_sect:	DS	4	; Sector number contain
000021                     B   191    	dir_ptr:	DS	3	; Pointer to the direct
       00000024            B   192    FIL_SIZE .ENDSTRUCT FIL
                           B   193    ;
                           B   194    ; Directory object structure (DIR)
                           B   195    ; 
                           B   196    DIR .STRUCT
000000                     B   197    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   198    	dptr:		DS	4	; Current read/write of
000013                     B   199    	clust:		DS	4	; Current cluster
000017                     B   200    	sect:		DS	4	; Current sector (0:Rea
00001B                     B   201    	dir:		DS	3	; Pointer to the direct
00001E                     B   202    	fn:		DS	12	; SFN (in/out) {body[8],ext
00002A                     B   203    	blk_ofs:	DS	4	; Offset of current ent
       0000002E            B   204    DIR_SIZE .ENDSTRUCT DIR
                           B   205    ;
                           B   206    ; File information structure (FILINFO)
                           B   207    ;
                           B   208    FILINFO .STRUCT
000000                     B   209    	fsize:		DS 	4	; File size
000004                     B   210    	fdate:		DS	2	; Modified date
000006                     B   211    	ftime:		DS	2	; Modified time
000008                     B   212    	fattrib:	DS	1	; File attribute
000009                     B   213    	altname:	DS	13	; Alternative file name
000016                     B   214    	fname:		DS	256	; Primary file name
       00000116            B   215    FILINFO_SIZE .ENDSTRUCT FILINFO
                           B   216    
                           B   217    ;
                           B   218    ; Macro for calling the API
                           B   219    ; Parameters:
                           B   220    ; - function: One of the function numbers liste
                           B   221    ;
                           B   222    MOSCALL:		MACRO	function
                           B   223    			LD	A, function
                           B   224    			RST.LIS	08h
                           B   225    			ENDMACRO 	
                           B   226    ;
                           A    25    
                           A    26    			SEGMENT CODE
                           A    27    	
                           A    28    			XDEF	_main
                           A    29    			XREF	Print_Hex24
                           A    30    			XREF	Print_Hex16
                           A    31    			XREF	Print_Hex8
                           A    32    			
                           A    33    ; Error: Invalid parameter
                           A    34    ;
000145 211300              A    35    _err_invalid_param:	LD		HL, 19			; T
000148 C9                  A    36    			RET
                           A    37    
                           A    38    
                           A    39    ; ASCII
                           A    40    ;
       00000003            A    41    CtrlC:	equ	03h
                           A    42    CR:	equ	0Dh
                           A    43    LF:	equ	0Ah
       0000001A            A    44    CtrlZ:	equ	1Ah
                           A    45    ;
       000B0000            A    46    BASE:	equ	0b0000h
                           A    47    
000149                     A    48    _main:
000149 79                  A    49    	ld	a,c	;AGON - number of parameters
00014A 3D                  A    50    	dec	a
00014B CA 7C 02            A    51    	jp	z,okusage
00014E FE03                A    52    	cp	3	;too many parameters
000150 D2 82 02            A    53    	jp	nc,badusage
                           A    54    
000153 5BDD2703            A    55    	LD.LIL		HL,(IX+3)		; HLU: pointer 
000157 0E01                A    56    	ld	c,fa_read	;open read-only
                           A    57    	MOSCALL	mos_fopen
00015D B7                  A    58    	or	a
00015E 20 0E               A    59    	jr	nz,open_ok
000160 210400              A    60    	ld	hl,4	;file not found/could not find 
000163 C9                  A    61    	ret			;exit
                           A    62    ;
                           A    63    ;
                           A    64    ; Close and exit routines
                           A    65    ;
                           A    66    
000164                     A    67    close:
                           A    68    ;C: Filehandle, or 0 to close all open files
                           A    69    ;returns number of still open files - how about
                           A    70    
000164 0E00                A    71    	ld	c,0
                           A    72    	MOSCALL	mos_fclose	
                           A    73    
00016A                     A    74    exit:
00016A 210000              A    75    	ld	hl,0	;for Agon - successful exit
00016D C9                  A    76    	ret
                           A    77    ;
                           A    78    ;
00016E                     A    79    open_ok:
                           A    80    
00016E 32 51 03            A    81    	ld	(in_handle),a	;store the file handle 
                           A    82    	MOSCALL	mos_sysvars	;get the sysvars locati
000175 DD7E19              A    83    	ld	a,(IX+sysvar_vkeycount)	;fetch keycount
000178 32 BB 03            A    84    	ld	(keycount),a	;store to compare again
00017B 5B21F0FF FF         A    85    	ld.lil	hl,0-16
000180 5B22 52 03 0B       A    86    	ld.lil	(counter+BASE),hl
000185                     A    87    printlp:
                           A    88    
                           A    89    
000185 5B21 56 03 0B       A    90    	ld.lil	hl,buffer+BASE
00018A 5B111000 00         A    91    	ld.lil	de,16
00018F 3A 51 03            A    92    	ld	a,(in_handle)
000192 4F                  A    93    	ld	c,a
                           A    94    	MOSCALL	mos_fread
000197 7B                  A    95    	ld		a,e
000198 B7                  A    96    	or		a
000199 CA 2E 02            A    97    	jp		z,donefile
00019C 47                  A    98    	ld		b,a	;b will track length for next l
00019D 5B2A 52 03 0B       A    99    	ld.lil	hl,(counter+BASE)
0001A2 5B111000 00         A   100    	ld.lil	de,16
0001A7 5B19                A   101    	add.lil	hl,de
0001A9 5B22 52 03 0B       A   102    	ld.lil	(counter+BASE),hl
0001AE C5                  A   103    	push	bc
0001AF CD 29 03            A   104    	call	Print_Hex24
0001B2 C1                  A   105    	pop		bc
0001B3                     A   106    hexloop:
0001B3 3E3A                A   107    	ld		a,':'
0001B5 D7                  A   108    	rst		10h
0001B6 21 56 03            A   109    	ld		hl,buffer
0001B9 0E00                A   110    	ld		c,0
0001BB                     A   111    hexlp1:
0001BB 79                  A   112    	ld		a,c
0001BC E603                A   113    	and		3
0001BE 20 07               A   114    	jr		nz,$f
0001C0 3E20                A   115    	ld		a,' '
0001C2 E5                  A   116    	push	hl
0001C3 C5                  A   117    	push	bc
0001C4 D7                  A   118    	rst		10h
0001C5 C1                  A   119    	pop		bc
0001C6 E1                  A   120    	pop		hl
0001C7                     A   121    $$:
0001C7 7E                  A   122    	ld		a,(hl)
                           A   123    
0001C8 E5                  A   124    	push	hl
0001C9 C5                  A   125    	push	bc
0001CA CD 3E 03            A   126    	call	Print_Hex8
0001CD C1                  A   127    	pop		bc
0001CE E1                  A   128    	pop		hl
0001CF 23                  A   129    	inc		hl
0001D0                     A   130    hexlp2:
0001D0 0C                  A   131    	inc		c
0001D1 79                  A   132    	ld		a,c
0001D2 FE10                A   133    	cp		16
0001D4 CA E8 01            A   134    	jp		z,hexend
0001D7 B8                  A   135    	cp		b
0001D8 38 E1               A   136    	jr		c,hexlp1
0001DA 3E20                A   137    	ld		a,' '
0001DC D7                  A   138    	rst		10h
0001DD D7                  A   139    	rst		10h
0001DE 79                  A   140    	ld		a,c
0001DF E603                A   141    	and		3
0001E1 20 03               A   142    	jr		nz,$f
0001E3 3E20                A   143    	ld		a,' '
0001E5 D7                  A   144    	rst		10h
0001E6                     A   145    $$:
0001E6 18 E8               A   146    	jr		hexlp2
                           A   147    
0001E8                     A   148    hexend:
0001E8 3E20                A   149    	ld		a,' '
0001EA D7                  A   150    	rst		10h
                           A   151    
0001EB                     A   152    asciiloop:
0001EB 3E7C                A   153    	ld		a,'|'
0001ED D7                  A   154    	rst		10h
0001EE 21 56 03            A   155    	ld		hl,buffer
0001F1 0E00                A   156    	ld		c,0
0001F3                     A   157    asciilp1:
0001F3 7E                  A   158    	ld		a,(hl)
0001F4 CD 37 02            A   159    	call	unprintable
0001F7                     A   160    asciilp2:
0001F7 E5                  A   161    	push	hl
0001F8 C5                  A   162    	push	bc
0001F9 D7                  A   163    	rst		10h
0001FA C1                  A   164    	pop		bc
0001FB E1                  A   165    	pop		hl
0001FC 23                  A   166    	inc		hl
0001FD 0C                  A   167    	inc		c
0001FE 79                  A   168    	ld		a,c
0001FF FE10                A   169    	cp		16
000201 CA 0B 02            A   170    	jp		z,asciiend
000204 B8                  A   171    	cp		b
000205 38 EC               A   172    	jr		c,asciilp1
000207 3E20                A   173    	ld		a,' '
000209 18 EC               A   174    	jr		asciilp2
                           A   175    
00020B                     A   176    asciiend:
00020B CD 41 02            A   177    	call	inline_print
00020E 7C0D0A00            A   178    	db		'|',CR,LF,0	
000212 C3 85 01            A   179    	jp		printlp
                           A   180    
                           A   181    
                           A   182    
                           A   183    
000215                     A   184    printbuff:
                           A   185    ;	push	bc		;preserve length
000215 11 56 03            A   186    	ld		de,buffer
000218                     A   187    $$:
000218 1A                  A   188    	ld		a,(de)	
000219 D7                  A   189    	rst		10h
00021A 13                  A   190    	inc		de
00021B 10 FB               A   191    	djnz	$b
                           A   192    ;	pop		bc
                           A   193    ;now keep printing until unprintable again
00021D                     A   194    allgood_lp
00021D CD 4D 02            A   195    	call	getbyte
000220 CD 37 02            A   196    	call	unprintable
000223 28 03               A   197    	jr		z,endstring
000225 D7                  A   198    	rst		10h
000226 18 F5               A   199    	jr		allgood_lp	
000228                     A   200    endstring:
000228 CD 41 02            A   201    	call	inline_print
00022B 0D0A00              A   202    	db		CR,LF,0		;newline at end - TEST
                           A   203    
00022E                     A   204    donefile:
00022E CD 41 02            A   205    	call	inline_print
000231 0D0A00              A   206    	db		CR,LF,0
000234 C3 64 01            A   207    	jp		close
                           A   208    
                           A   209    
                           A   210    ; Entry:
                           A   211    ; A is a character to test
                           A   212    ; Exit:
                           A   213    ; unprintable character converted to a '.'
000237                     A   214    unprintable:
000237 FE20                A   215    	cp	' '
000239 38 03               A   216    	jr	c,$f
00023B FE7F                A   217    	cp	127
00023D D8                  A   218    	ret	c	;always nz
00023E 3E2E                A   219    $$:	ld	a,'.'	;xor	a	;sets 0 flag
000240 C9                  A   220    	ret
                           A   221    ;
                           A   222    ; Prints string directly after the call
                           A   223    ;
000241 E1                  A   224    inline_print:	pop	hl
000242 CD 48 02            A   225    	call	print_string
000245 E9                  A   226    	jp	(hl)
                           A   227    ;
                           A   228    ; more efficient print string for strings > 1 c
000246                     A   229    $$:
000246 D7                  A   230    	rst	10h	;Agon uses this to print the charac
000247 23                  A   231    	inc	hl
000248 7E                  A   232    print_string:	ld	a,(hl)
000249 B7                  A   233    	or	a
00024A 20 FA               A   234    	jr	nz,$b
00024C C9                  A   235    	ret
                           A   236    ;
                           A   237    ;
00024D                     A   238    getbyte:
00024D CD 59 02            A   239    	call	ck_ctrlC
000250 3A 51 03            A   240    	ld	a,(in_handle)
000253 4F                  A   241    	ld	c,a
                           A   242    	MOSCALL mos_fgetc	;carry flag on last byt
000258 C9                  A   243    	ret
                           A   244    
                           A   245    ; Check for ctrl-C. If so, clean stack and exit
                           A   246    ;
000259                     A   247    ck_ctrlC:
000259 3E01                A   248    	ld	a,1		; modified below by self modify
00025B 3D                  A   249    	dec	a
00025C E60F                A   250    	and	15
00025E 32 5A 02            A   251    	ld	(ck_ctrlC+1),a	; update LD A instructi
000261 C0                  A   252    	ret	nz		; check every 16 calls only
                           A   253    	MOSCALL	mos_sysvars	;get the sysvars locati
000266 5BDD7E19            A   254    	ld.lil	a,(IX+sysvar_vkeycount)	;check if a
00026A 21 BB 03            A   255    	ld	hl,keycount
00026D BE                  A   256    	cp	(hl)	;compare against keycount for c
00026E C8                  A   257    	ret	z
00026F 77                  A   258    	ld	(hl),a	;update keycount
000270 5BDD7E05            A   259    	ld.lil	a,(IX+sysvar_keyascii)	;fetch char
000274 FE03                A   260    	cp	3	;is it ctr-C
000276 C0                  A   261    	ret	nz
000277 E1                  A   262    	pop	hl		;clean up stack
000278 E1                  A   263    	pop	hl
000279 C3 64 01            A   264    	jp	close
                           A   265    
00027C CD 88 02            A   266    okusage:	call usage
00027F C3 6A 01            A   267    	jp	exit
                           A   268    
000282 CD 88 02            A   269    badusage:	call usage
000285 C3 45 01            A   270    	jp	_err_invalid_param
                           A   271    ;
                           A   272    ; usage -- show syntax
                           A   273    ; 
000288 CD 41 02            A   274    usage:	call	inline_print
00028B 0D0A6865 7864756D   A   275    	db	CR,LF,'hexdump utility for Agon by Shaw
000293 70207574 696C6974 
00029B 7920666F 72204167 
0002A3 6F6E2062 79205368 
0002AB 61776E20 53696A6E 
0002B3 73747261 2031312D 
0002BB 4A756E2D 32303233 
0002C3 0D0A0D0A 
0002C7 55736167 653A0D0A   A   276    	db	'Usage:',CR,LF
0002CF 20202068 65786475   A   277    	db	'   hexdump <file>',CR,LF,CR,LF
0002D7 6D70203C 66696C65 
0002DF 3E0D0A0D 0A 
0002E4 53746F72 65206865   A   278    	db 	'Store hexdump.bin in /mos directory. M
0002EC 7864756D 702E6269 
0002F4 6E20696E 202F6D6F 
0002FC 73206469 72656374 
000304 6F72792E 204D696E 
00030C 696D756D 204D4F53 
000314 20766572 73696F6E 
00031C 20312E30 332E0D0A 
000324 0D0A00 
000327 C9                  A   279    	ret
                           A   280    
                           A   281    ;
                           A   282    ; data storage . . .
                           A   283    ;	
000328                     A   284    stringlength:
000328 04                  A   285    	db	4	;default of 4 characters
                           A   286    ; uninitialized storage/BSS but can't use that 
                           A   287    ;
                           A   288    ; RAM
                           A   289    ; 
                           A   290    			DEFINE	LORAM, SPACE = ROM
                           A   291    ;			ORDER	__VECTORS, CODE, LORAM
                           A   292    			SEGMENT LORAM
                           A   293    		
                           A   294    ;			SEGMENT	BSS
                           A   295    ;			SEGMENT CODE
                           A   296    
000351                     A   297    in_handle:	DS	1	;Only needs 1 byte handle
000352                     A   298    counter:	DS	4
000356                     A   299    buffer:		DS	100	;Space to buffer incoming s
0003BA                     A   300    curbyte:	DS	1	;current byte in the buffer
0003BB                     A   301    keycount:	DS	1	;current key count
                           A   302    	end


Errors: 0
Warnings: 0
Lines Assembled: 640
