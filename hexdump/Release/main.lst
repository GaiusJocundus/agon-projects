Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED13-Jun-23     11:11:10     page:   1


PC     Object              I  Line    Source 
                           A     1    ; HEXDUMP utility
                           A     2    ;
                           A     3    ;
                           A     4    ; Written Agon native by Shawn Sijnstra
                           A     5    ;
                           A     6    ; Notable changes for reference:
                           A     7    ; required colons on all labels
                           A     8    ; labels are case sensitive
                           A     9    ; code is a reserved word and can't be used as 
                           A    10    ; numeric evaluations are done differently - ch
                           A    11    ; reserved word INCLUDE needs to be in upper ca
                           A    12    ; assembly source MUST be .asm, can't use e.g. 
                           A    13    ; supports defb as a synonym for db, but NOT de
                           A    14    ; labels can't start with @
                           A    15    ;
                           A    16    ; DESIGN OF WIDTH:
                           A    17    ; 6 chars for current byte
                           A    18    ; dddddd: XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX |
                           A    19    ; dddddd:XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX|..
                           A    20    
                           A    21    
                           A    22    			.ASSUME	ADL = 0				
                           A    23    
                           B     0    			INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	Memory Dump - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/11/2022
                           B     5    ; Last Updated:	15/11/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    				
       0000FF00            B     9    RAM_Top:		EQU		0FF00h
       00000000            B    10    Stack_Top:		EQU		00000h	; Stack at top
                           B    11    	
                           B    12    ; For GPIO
                           B    13    ; PA not available on eZ80L92
                           B    14    ;
       00000096            B    15    PA_DR:			EQU		96h
       00000097            B    16    PA_DDR:			EQU		97h
       00000098            B    17    PA_ALT1:		EQU		98h
       00000099            B    18    PA_ALT2:		EQU		99h
       0000009A            B    19    PB_DR:          	EQU		9Ah
       0000009B            B    20    PB_DDR:        	 	EQU		9Bh
       0000009C            B    21    PB_ALT1:        	EQU		9Ch
       0000009D            B    22    PB_ALT2:        	EQU		9Dh
       0000009E            B    23    PC_DR:          	EQU		9Eh
       0000009F            B    24    PC_DDR:         	EQU		9Fh
       000000A0            B    25    PC_ALT1:        	EQU		A0h
       000000A1            B    26    PC_ALT2:        	EQU		A1h
       000000A2            B    27    PD_DR:          	EQU		A2h
       000000A3            B    28    PD_DDR:			EQU		A3h
       000000A4            B    29    PD_ALT1:		EQU		A4h
       000000A5            B    30    PD_ALT2:		EQU		A5h
                           B    31    	
       00000000            B    32    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    33    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    34    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    35    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    36    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    37    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    38    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    39    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    40    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    41    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    42    	
                           B    43    ; For serial.asm
                           B    44    ; 
       016E3600            B    45    BASE_CLOCK		EQU	24000000	; It's actually
                           B    46    
       00000003            B    47    BAUD_500000		EQU	BASE_CLOCK / (16 * 500000)
       00000006            B    48    BAUD_250000		EQU	BASE_CLOCK / (16 * 250000)
       0000000C            B    49    BAUD_125000		EQU	BASE_CLOCK / (16 * 125000)
       0000004E            B    50    BAUD_19200		EQU	BASE_CLOCK / (16 * 19200)	
                           B    51    
                           B    52    ; For interrupts.asm
                           B    53    ;
                           B    54    
                           B    55    ;UARTs
                           B    56    ;
       00000018            B    57    UART0_IVECT		EQU		18h
       0000001A            B    58    UART1_IVECT		EQU		1Ah
                           B    59    
                           B    60    ;Ports
                           B    61    ;
       00000030            B    62    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    63    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    64    PB2_IVECT  	  	EQU   	34h
       00000036            B    65    PB3_IVECT  	  	EQU   	36h
       00000038            B    66    PB4_IVECT    		EQU   	38h
       0000003A            B    67    PB5_IVECT    		EQU   	3Ah
       0000003C            B    68    PB6_IVECT    		EQU   	3Ch
       0000003E            B    69    PB7_IVECT    		EQU   	3Eh
                           B    70                           
       00000040            B    71    PC0_IVECT    		EQU   	40h
       00000042            B    72    PC1_IVECT    		EQU   	42h
       00000044            B    73    PC2_IVECT    		EQU   	44h
       00000046            B    74    PC3_IVECT    		EQU   	46h
       00000048            B    75    PC4_IVECT    		EQU   	48h
       0000004A            B    76    PC5_IVECT    		EQU   	4Ah
       0000004C            B    77    PC6_IVECT    		EQU   	4Ch
       0000004E            B    78    PC7_IVECT    		EQU   	4Eh
                           B    79                           
       00000050            B    80    PD0_IVECT    		EQU   	50h
       00000052            B    81    PD1_IVECT    		EQU   	52h
       00000054            B    82    PD2_IVECT    		EQU   	54h
       00000056            B    83    PD3_IVECT    		EQU   	56h
       00000058            B    84    PD4_IVECT    		EQU   	58h
       0000005A            B    85    PD5_IVECT    		EQU   	5Ah
       0000005C            B    86    PD6_IVECT    		EQU   	5Ch
       0000005E            B    87    PD7_IVECT    		EQU   	5Eh
                           B    88    
                           B    89    ; Originally in main.asm
                           B    90    ;
       0000000D            B    91    CR:			EQU     0DH
       0000000A            B    92    LF:			EQU     0AH
       0000001B            B    93    ESC:			EQU     1BH
                           B     0    			INCLUDE "mos_api.inc"	; In MOS/sr
                           B     1    ;
                           B     2    ; Title:	AGON MOS - API for user projects
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	03/08/2022
                           B     5    ; Last Updated:	15/04/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 05/08/2022:	Added mos_feof
                           B     9    ; 09/08/2022:	Added system variables: cursorX
                           B    10    ; 18/08/2022:	Added system variables: scrchar
                           B    11    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
                           B    12    ; 24/09/2022:	Added mos_getError, mos_mkdir
                           B    13    ; 13/10/2022:	Added mos_oscli
                           B    14    ; 23/02/2023:	Added more sysvars, fixed typo 
                           B    15    ; 04/03/2023:	Added sysvar_scrpixelIndex
                           B    16    ; 08/03/2023:	Renamed sysvar_keycode to sysva
                           B    17    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos
                           B    18    ; 21/03/2023:	Added mos_setintvector, sysvars
                           B    19    ; 22/03/2023:	The VDP commands are now indexe
                           B    20    ; 29/03/2023:	Added mos_uopen, mos_uclose, mo
                           B    21    ; 13/04/2023:	Added FatFS file structures (FF
                           B    22    ; 15/04/2023:	Added mos_getfil, mos_fread, mo
                           B    23    
                           B    24    ; VDP control (VDU 23, 0, n)
                           B    25    ;
       00000080            B    26    vdp_gp:			EQU 	80h
       00000081            B    27    vdp_keycode:		EQU 	81h
       00000082            B    28    vdp_cursor:		EQU	82h
       00000083            B    29    vdp_scrchar:		EQU	83h
       00000084            B    30    vdp_scrpixel:		EQU	84h
       00000085            B    31    vdp_audio:		EQU	85h
       00000086            B    32    vdp_mode:		EQU	86h
       00000087            B    33    vdp_rtc:		EQU	87h
       00000088            B    34    vdp_keystate:		EQU	88h
       000000C0            B    35    vdp_logicalcoords:	EQU	C0h
       000000FF            B    36    vdp_terminalmode:	EQU	FFh
                           B    37    
                           B    38    ; MOS high level functions
                           B    39    ;
       00000000            B    40    mos_getkey:		EQU	00h
       00000001            B    41    mos_load:		EQU	01h
       00000002            B    42    mos_save:		EQU	02h
       00000003            B    43    mos_cd:			EQU	03h
       00000004            B    44    mos_dir:		EQU	04h
       00000005            B    45    mos_del:		EQU	05h
       00000006            B    46    mos_ren:		EQU	06h
       00000007            B    47    mos_mkdir:		EQU	07h
       00000008            B    48    mos_sysvars:		EQU	08h
       00000009            B    49    mos_editline:		EQU	09h
       0000000A            B    50    mos_fopen:		EQU	0Ah
       0000000B            B    51    mos_fclose:		EQU	0Bh
       0000000C            B    52    mos_fgetc:		EQU	0Ch
       0000000D            B    53    mos_fputc:		EQU	0Dh
       0000000E            B    54    mos_feof:		EQU	0Eh
       0000000F            B    55    mos_getError:		EQU	0Fh
       00000010            B    56    mos_oscli:		EQU	10h
       00000011            B    57    mos_copy:		EQU	11h
       00000012            B    58    mos_getrtc:		EQU	12h
       00000013            B    59    mos_setrtc:		EQU	13h
       00000014            B    60    mos_setintvector:	EQU	14h
       00000015            B    61    mos_uopen:		EQU	15h
       00000016            B    62    mos_uclose:		EQU	16h
       00000017            B    63    mos_ugetc:		EQU	17h
       00000018            B    64    mos_uputc:		EQU 	18h
       00000019            B    65    mos_getfil:		EQU	19h
       0000001A            B    66    mos_fread:		EQU	1Ah
       0000001B            B    67    mos_fwrite:		EQU	1Bh
       0000001C            B    68    mos_flseek:		EQU	1Ch
                           B    69    
                           B    70    ; FatFS file access functions
                           B    71    ;
       00000080            B    72    ffs_fopen:		EQU	80h
       00000081            B    73    ffs_fclose:		EQU	81h
       00000082            B    74    ffs_fread:		EQU	82h
       00000083            B    75    ffs_fwrite:		EQU	83h
       00000084            B    76    ffs_flseek:		EQU	84h
       00000085            B    77    ffs_ftruncate:		EQU	85h
       00000086            B    78    ffs_fsync:		EQU	86h
       00000087            B    79    ffs_fforward:		EQU	87h
       00000088            B    80    ffs_fexpand:		EQU	88h
       00000089            B    81    ffs_fgets:		EQU	89h
       0000008A            B    82    ffs_fputc:		EQU	8Ah
       0000008B            B    83    ffs_fputs:		EQU	8Bh
       0000008C            B    84    ffs_fprintf:		EQU	8Ch
       0000008D            B    85    ffs_ftell:		EQU	8Dh
       0000008E            B    86    ffs_feof:		EQU	8Eh
       0000008F            B    87    ffs_fsize:		EQU	8Fh
       00000090            B    88    ffs_ferror:		EQU	90h
                           B    89    
                           B    90    ; FatFS directory access functions
                           B    91    ;
       00000091            B    92    ffs_dopen:		EQU	91h
       00000092            B    93    ffs_dclose:		EQU	92h
       00000093            B    94    ffs_dread:		EQU	93h
       00000094            B    95    ffs_dfindfirst:		EQU	94h
       00000095            B    96    ffs_dfindnext:		EQU	95h
                           B    97    
                           B    98    ; FatFS file and directory management functions
                           B    99    ;
       00000096            B   100    ffs_stat:		EQU	96h
       00000097            B   101    ffs_unlink:		EQU	97h
       00000098            B   102    ffs_rename:		EQU	98h
       00000099            B   103    ffs_chmod:		EQU	99h
       0000009A            B   104    ffs_utime:		EQU	9Ah
       0000009B            B   105    ffs_mkdir:		EQU	9Bh
       0000009C            B   106    ffs_chdir:		EQU	9Ch
       0000009D            B   107    ffs_chdrive:		EQU	9Dh
       0000009E            B   108    ffs_getcwd:		EQU	9Eh
                           B   109    
                           B   110    ; FatFS volume management and system configurat
                           B   111    ;
       0000009F            B   112    ffs_mount:		EQU	9Fh
       000000A0            B   113    ffs_mkfs:		EQU	A0h
       000000A1            B   114    ffs_fdisk		EQU	A1h
       000000A2            B   115    ffs_getfree:		EQU	A2h
       000000A3            B   116    ffs_getlabel:		EQU	A3h
       000000A4            B   117    ffs_setlabel:		EQU	A4h
       000000A5            B   118    ffs_setcp:		EQU	A5h
                           B   119    	
                           B   120    ; File access modes
                           B   121    ;
       00000001            B   122    fa_read:		EQU	01h
       00000002            B   123    fa_write:		EQU	02h
       00000000            B   124    fa_open_existing:	EQU	00h
       00000004            B   125    fa_create_new:		EQU	04h
       00000008            B   126    fa_create_always:	EQU	08h
       00000010            B   127    fa_open_always:		EQU	10h
       00000030            B   128    fa_open_append:		EQU	30h
                           B   129    	
                           B   130    ; System variable indexes for api_sysvars
                           B   131    ; Index into _sysvars in globals.asm
                           B   132    ;
       00000000            B   133    sysvar_time:		EQU	00h	; 4: Clock timer in
       00000004            B   134    sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indic
       00000005            B   135    sysvar_keyascii:	EQU	05h	; 1: ASCII keycode,
       00000006            B   136    sysvar_keymods:		EQU	06h	; 1: Keycode modifi
       00000007            B   137    sysvar_cursorX:		EQU	07h	; 1: Cursor X posit
       00000008            B   138    sysvar_cursorY:		EQU	08h	; 1: Cursor Y posit
       00000009            B   139    sysvar_scrchar:		EQU	09h	; 1: Character read
       0000000A            B   140    sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data rea
       0000000D            B   141    sysvar_audioChannel:	EQU	0Dh	; 1: Audio chan
       0000000E            B   142    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio chan
       0000000F            B   143    sysvar_scrWidth:	EQU	0Fh	; 2: Screen width i
       00000011            B   144    sysvar_scrHeight:	EQU	11h	; 2: Screen height 
       00000013            B   145    sysvar_scrCols:		EQU	13h	; 1: Screen columns
       00000014            B   146    sysvar_scrRows:		EQU	14h	; 1: Screen rows in
       00000015            B   147    sysvar_scrColours:	EQU	15h	; 1: Number of colo
       00000016            B   148    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of p
       00000017            B   149    sysvar_vkeycode:	EQU	17h	; 1: Virtual key co
       00000018            B   150    sysvar_vkeydown		EQU	18h	; 1: Virtual key st
       00000019            B   151    sysvar_vkeycount:	EQU	19h	; 1: Incremented ev
       0000001A            B   152    sysvar_rtc:		EQU	1Ah	; 8: Real time clock da
       00000022            B   153    sysvar_keydelay:	EQU	22h	; 2: Keyboard repea
       00000024            B   154    sysvar_keyrate:		EQU	24h	; 2: Keyboard repea
       00000026            B   155    sysvar_keyled:		EQU	26h	; 1: Keyboard LED s
                           B   156    	
                           B   157    ; Flags for the VPD protocol
                           B   158    ;
       00000001            B   159    vdp_pflag_cursor:	EQU	00000001b
       00000002            B   160    vdp_pflag_scrchar:	EQU	00000010b
       00000004            B   161    vdp_pflag_point:	EQU	00000100b
       00000008            B   162    vdp_pflag_audio:	EQU	00001000b
       00000010            B   163    vdp_pflag_mode:		EQU	00010000b
       00000020            B   164    vdp_pflag_rtc:		EQU	00100000b
                           B   165    
                           B   166    ;
                           B   167    ; FatFS structures
                           B   168    ; These mirror the structures contained in src_
                           B   169    ;
                           B   170    ; Object ID and allocation information (FFOBJID
                           B   171    ;
                           B   172    FFOBJID	.STRUCT
000000                     B   173    	fs:		DS	3	; Pointer to the hosting vo
000003                     B   174    	id:		DS	2	; Hosting volume mount ID
000005                     B   175    	attr:		DS	1	; Object attribute
000006                     B   176    	stat:		DS	1	; Object chain status (
000007                     B   177    	sclust:		DS	4	; Object data start clu
00000B                     B   178    	objsize:	DS	4	; Object size (valid wh
       0000000F            B   179    FFOBJID_SIZE .ENDSTRUCT FFOBJID
                           B   180    ;
                           B   181    ; File object structure (FIL)
                           B   182    ;
                           B   183    FIL .STRUCT
000000                     B   184    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   185    	flag:		DS	1	; File status flags
000010                     B   186    	err:		DS	1	; Abort flag (error cod
000011                     B   187    	fptr:		DS	4	; File read/write point
000015                     B   188    	clust:		DS	4	; Current cluster of fp
000019                     B   189    	sect:		DS	4	; Sector number appeari
00001D                     B   190    	dir_sect:	DS	4	; Sector number contain
000021                     B   191    	dir_ptr:	DS	3	; Pointer to the direct
       00000024            B   192    FIL_SIZE .ENDSTRUCT FIL
                           B   193    ;
                           B   194    ; Directory object structure (DIR)
                           B   195    ; 
                           B   196    DIR .STRUCT
000000                     B   197    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   198    	dptr:		DS	4	; Current read/write of
000013                     B   199    	clust:		DS	4	; Current cluster
000017                     B   200    	sect:		DS	4	; Current sector (0:Rea
00001B                     B   201    	dir:		DS	3	; Pointer to the direct
00001E                     B   202    	fn:		DS	12	; SFN (in/out) {body[8],ext
00002A                     B   203    	blk_ofs:	DS	4	; Offset of current ent
       0000002E            B   204    DIR_SIZE .ENDSTRUCT DIR
                           B   205    ;
                           B   206    ; File information structure (FILINFO)
                           B   207    ;
                           B   208    FILINFO .STRUCT
000000                     B   209    	fsize:		DS 	4	; File size
000004                     B   210    	fdate:		DS	2	; Modified date
000006                     B   211    	ftime:		DS	2	; Modified time
000008                     B   212    	fattrib:	DS	1	; File attribute
000009                     B   213    	altname:	DS	13	; Alternative file name
000016                     B   214    	fname:		DS	256	; Primary file name
       00000116            B   215    FILINFO_SIZE .ENDSTRUCT FILINFO
                           B   216    
                           B   217    ;
                           B   218    ; Macro for calling the API
                           B   219    ; Parameters:
                           B   220    ; - function: One of the function numbers liste
                           B   221    ;
                           B   222    MOSCALL:		MACRO	function
                           B   223    			LD	A, function
                           B   224    			RST.LIS	08h
                           B   225    			ENDMACRO 	
                           B   226    ;
                           A    26    
                           A    27    			SEGMENT CODE
                           A    28    	
                           A    29    			XDEF	_main
                           A    30    			XREF	Print_Hex24
                           A    31    			XREF	Print_Hex16
                           A    32    			XREF	Print_Hex8
                           A    33    			
                           A    34    ; Error: Invalid parameter
                           A    35    ;
000145 211300              A    36    _err_invalid_param:	LD		HL, 19			; T
000148 C9                  A    37    			RET
                           A    38    
                           A    39    
                           A    40    ; ASCII
                           A    41    ;
       00000003            A    42    CtrlC:	equ	03h
                           A    43    CR:	equ	0Dh
                           A    44    LF:	equ	0Ah
       0000001A            A    45    CtrlZ:	equ	1Ah
                           A    46    ;
       000B0000            A    47    BASE:	equ	0b0000h
                           A    48    
000149                     A    49    _main:
000149 79                  A    50    	ld	a,c	;AGON - number of parameters
00014A 3D                  A    51    	dec	a
00014B CA 88 02            A    52    	jp	z,okusage
00014E FE03                A    53    	cp	3	;too many parameters
000150 D2 8E 02            A    54    	jp	nc,badusage
                           A    55    
000153 5BDD2703            A    56    	LD.LIL		HL,(IX+3)		; HLU: pointer 
000157 5B7E                A    57    	ld.LIL	a,(HL)
000159 FE2D                A    58    	cp	'-'
00015B 20 0C               A    59    	jr	nz,openit
00015D 5B23                A    60    	INC.LIL	HL
00015F 5B7E                A    61    	LD.LIL	a,(HL)				;24 bit
000161 FE69                A    62    	cp	'i'
000163 C2 8E 02            A    63    	jp	nz,badusage
000166 C3 71 03            A    64    	jp	interactive
                           A    65    
000169                     A    66    openit:
000169 0E01                A    67    	ld	c,fa_read	;open read-only for straigh
                           A    68    	MOSCALL	mos_fopen
00016F B7                  A    69    	or	a
000170 20 0E               A    70    	jr	nz,open_ok
000172 210400              A    71    	ld	hl,4	;file not found/could not find 
000175 C9                  A    72    	ret			;exit
                           A    73    ;
                           A    74    ;
                           A    75    ; Close and exit routines
                           A    76    ;
                           A    77    
000176                     A    78    close:
                           A    79    ;C: Filehandle, or 0 to close all open files
                           A    80    ;returns number of still open files - how about
                           A    81    
000176 0E00                A    82    	ld	c,0
                           A    83    	MOSCALL	mos_fclose	
                           A    84    
00017C                     A    85    exit:
00017C 210000              A    86    	ld	hl,0	;for Agon - successful exit
00017F C9                  A    87    	ret
                           A    88    ;
                           A    89    ;
000180                     A    90    open_ok:
                           A    91    
000180 32 32 05            A    92    	ld	(in_handle),a	;store the file handle 
                           A    93    	MOSCALL	mos_sysvars	;get the sysvars locati
000187 DD7E19              A    94    	ld	a,(IX+sysvar_vkeycount)	;fetch keycount
00018A 32 3E 07            A    95    	ld	(keycount),a	;store to compare again
00018D 5B21F0FF FF         A    96    	ld.lil	hl,0-16
000192 5B22 33 05 0B       A    97    	ld.lil	(counter+BASE),hl
                           A    98    
000197                     A    99    printlp:
                           A   100    
                           A   101    
000197 5B21 3D 05 0B       A   102    	ld.lil	hl,buffer+BASE
00019C 5B111000 00         A   103    	ld.lil	de,16
0001A1 3A 32 05            A   104    	ld	a,(in_handle)
0001A4 4F                  A   105    	ld	c,a
                           A   106    	MOSCALL	mos_fread
0001A9 7B                  A   107    	ld		a,e
0001AA B7                  A   108    	or		a
0001AB CA 27 02            A   109    	jp		z,donefile
0001AE 47                  A   110    	ld		b,a	;b will track length for next l
0001AF 5B2A 33 05 0B       A   111    	ld.lil	hl,(counter+BASE)
0001B4 5B111000 00         A   112    	ld.lil	de,16
0001B9 5B19                A   113    	add.lil	hl,de
0001BB 5B22 33 05 0B       A   114    	ld.lil	(counter+BASE),hl
0001C0 C5                  A   115    	push	bc
0001C1 CD 0A 05            A   116    	call	Print_Hex24
0001C4 C1                  A   117    	pop		bc
0001C5                     A   118    hexloop:
0001C5 3E3A                A   119    	ld		a,':'
0001C7 D7                  A   120    	rst		10h
0001C8 21 3D 05            A   121    	ld		hl,buffer
0001CB 0E00                A   122    	ld		c,0
0001CD                     A   123    hexlp1:
0001CD 79                  A   124    	ld		a,c
0001CE E603                A   125    	and		3
0001D0 20 07               A   126    	jr		nz,$f
0001D2 3E20                A   127    	ld		a,' '
0001D4 E5                  A   128    	push	hl
0001D5 C5                  A   129    	push	bc
0001D6 D7                  A   130    	rst		10h
0001D7 C1                  A   131    	pop		bc
0001D8 E1                  A   132    	pop		hl
0001D9                     A   133    $$:
0001D9 7E                  A   134    	ld		a,(hl)
                           A   135    
0001DA E5                  A   136    	push	hl
0001DB C5                  A   137    	push	bc
0001DC CD 1F 05            A   138    	call	Print_Hex8
0001DF C1                  A   139    	pop		bc
0001E0 E1                  A   140    	pop		hl
0001E1 23                  A   141    	inc		hl
0001E2                     A   142    hexlp2:
0001E2 0C                  A   143    	inc		c
0001E3 79                  A   144    	ld		a,c
0001E4 FE10                A   145    	cp		16
0001E6 CA FA 01            A   146    	jp		z,hexend
0001E9 B8                  A   147    	cp		b
0001EA 38 E1               A   148    	jr		c,hexlp1
0001EC 3E20                A   149    	ld		a,' '
0001EE D7                  A   150    	rst		10h
0001EF D7                  A   151    	rst		10h
0001F0 79                  A   152    	ld		a,c
0001F1 E603                A   153    	and		3
0001F3 20 03               A   154    	jr		nz,$f
0001F5 3E20                A   155    	ld		a,' '
0001F7 D7                  A   156    	rst		10h
0001F8                     A   157    $$:
0001F8 18 E8               A   158    	jr		hexlp2
                           A   159    
0001FA                     A   160    hexend:
0001FA 3E20                A   161    	ld		a,' '
0001FC D7                  A   162    	rst		10h
                           A   163    
0001FD                     A   164    asciiloop:
0001FD 3E7C                A   165    	ld		a,'|'
0001FF D7                  A   166    	rst		10h
000200 21 3D 05            A   167    	ld		hl,buffer
000203 0E00                A   168    	ld		c,0
000205                     A   169    asciilp1:
000205 7E                  A   170    	ld		a,(hl)
000206 CD 47 02            A   171    	call	unprintable
000209                     A   172    asciilp2:
000209 E5                  A   173    	push	hl
00020A C5                  A   174    	push	bc
00020B D7                  A   175    	rst		10h
00020C C1                  A   176    	pop		bc
00020D E1                  A   177    	pop		hl
00020E 23                  A   178    	inc		hl
00020F 0C                  A   179    	inc		c
000210 79                  A   180    	ld		a,c
000211 FE10                A   181    	cp		16
000213 CA 1D 02            A   182    	jp		z,asciiend
000216 B8                  A   183    	cp		b
000217 38 EC               A   184    	jr		c,asciilp1
000219 3E20                A   185    	ld		a,' '
00021B 18 EC               A   186    	jr		asciilp2
                           A   187    
00021D                     A   188    asciiend:
00021D CD 51 02            A   189    	call	inline_print
000220 7C0D0A00            A   190    	db		'|',CR,LF,0	
000224 C3 97 01            A   191    	jp		printlp
                           A   192    
                           A   193    
                           A   194    
000227                     A   195    donefile:
000227 CD 51 02            A   196    	call	inline_print
00022A 0D0A00              A   197    	db		CR,LF,0
00022D C3 76 01            A   198    	jp		close
                           A   199    
000230                     A   200    hit_EOF:
000230 CD 51 02            A   201    	call	inline_print
000233 50617374 20656E64   A   202    	db		'Past end of file',CR,LF,0
00023B 206F6620 66696C65 
000243 0D0A00 
000246 C9                  A   203    	ret
                           A   204    
                           A   205    ; Entry:
                           A   206    ; A is a character to test
                           A   207    ; Exit:
                           A   208    ; unprintable character converted to a '.'
000247                     A   209    unprintable:
000247 FE20                A   210    	cp	' '
000249 38 03               A   211    	jr	c,$f
00024B FE7F                A   212    	cp	127
00024D D8                  A   213    	ret	c	;always nz
00024E 3E2E                A   214    $$:	ld	a,'.'	;xor	a	;sets 0 flag
000250 C9                  A   215    	ret
                           A   216    ;
                           A   217    ; Prints string directly after the call
                           A   218    ;
000251 E1                  A   219    inline_print:	pop	hl
000252 CD 58 02            A   220    	call	print_string
000255 E9                  A   221    	jp	(hl)
                           A   222    ;
                           A   223    ; more efficient print string for strings > 1 c
000256                     A   224    $$:
000256 D7                  A   225    	rst	10h	;Agon uses this to print the charac
000257 23                  A   226    	inc	hl
000258 7E                  A   227    print_string:	ld	a,(hl)
000259 B7                  A   228    	or	a
00025A 20 FA               A   229    	jr	nz,$b
00025C C9                  A   230    	ret
                           A   231    ;
                           A   232    ;
00025D                     A   233    $$:
00025D D7                  A   234    	rst	10h	;Agon uses this to print the charac
00025E 23                  A   235    	inc	hl
00025F 7E                  A   236    print_HL:	ld	a,(hl)
000260 FE20                A   237    	cp	32
000262 30 F9               A   238    	jr	nc,$b
000264 C9                  A   239    	ret
                           A   240    
                           A   241    
                           A   242    ; Check for ctrl-C. If so, clean stack and exit
                           A   243    ;
000265                     A   244    ck_ctrlC:
000265 3E01                A   245    	ld	a,1		; modified below by self modify
000267 3D                  A   246    	dec	a
000268 E60F                A   247    	and	15
00026A 32 66 02            A   248    	ld	(ck_ctrlC+1),a	; update LD A instructi
00026D C0                  A   249    	ret	nz		; check every 16 calls only
                           A   250    	MOSCALL	mos_sysvars	;get the sysvars locati
000272 5BDD7E19            A   251    	ld.lil	a,(IX+sysvar_vkeycount)	;check if a
000276 21 3E 07            A   252    	ld	hl,keycount
000279 BE                  A   253    	cp	(hl)	;compare against keycount for c
00027A C8                  A   254    	ret	z
00027B 77                  A   255    	ld	(hl),a	;update keycount
00027C 5BDD7E05            A   256    	ld.lil	a,(IX+sysvar_keyascii)	;fetch char
000280 FE03                A   257    	cp	3	;is it ctr-C
000282 C0                  A   258    	ret	nz
000283 E1                  A   259    	pop	hl		;clean up stack
000284 E1                  A   260    	pop	hl
000285 C3 76 01            A   261    	jp	close
                           A   262    
000288 CD 94 02            A   263    okusage:	call usage
00028B C3 7C 01            A   264    	jp	exit
                           A   265    
00028E CD 94 02            A   266    badusage:	call usage
000291 C3 45 01            A   267    	jp	_err_invalid_param
                           A   268    ;
                           A   269    ; usage -- show syntax
                           A   270    ; 
000294 CD 51 02            A   271    usage:	call	inline_print
000297 0D0A6865 7864756D   A   272    	db	CR,LF,'hexdump utility for Agon by Shaw
00029F 70207574 696C6974 
0002A7 7920666F 72204167 
0002AF 6F6E2062 79205368 
0002B7 61776E20 53696A6E 
0002BF 73747261 2031312D 
0002C7 4A756E2D 32303233 
0002CF 0D0A0D0A 
0002D3 55736167 653A0D0A   A   273    	db	'Usage:',CR,LF
0002DB 20202068 65786475   A   274    	db	'   hexdump [-i] <file>',CR,LF,CR,LF
0002E3 6D70205B 2D695D20 
0002EB 3C66696C 653E0D0A 
0002F3 0D0A 
0002F5 096F7074 696F6E61   A   275    	db	'	optional paramter i uses hexdump in
0002FD 6C207061 72616D74 
000305 65722069 20757365 
00030D 73206865 7864756D 
000315 7020696E 20696E74 
00031D 65726163 74697665 
000325 206D6F64 652E0D0A 
00032D 53746F72 65206865   A   276    	db 	'Store hexdump.bin in /mos directory. M
000335 7864756D 702E6269 
00033D 6E20696E 202F6D6F 
000345 73206469 72656374 
00034D 6F72792E 204D696E 
000355 696D756D 204D4F53 
00035D 20766572 73696F6E 
000365 20312E30 332E0D0A 
00036D 0D0A00 
000370 C9                  A   277    	ret
                           A   278    
                           A   279    ;
                           A   280    ;
                           A   281    ;
                           A   282    ;
                           A   283    ;
                           A   284    ;
000371                     A   285    interactive:
000371 5BDD2706            A   286    	LD.LIL		HL,(IX+6)		; HLU: pointer 
000375 0E01                A   287    	ld	c,fa_read	;open read-only for straigh
                           A   288    	MOSCALL	mos_fopen
00037B B7                  A   289    	or	a
00037C 20 04               A   290    	jr	nz,iopen_ok
00037E 210400              A   291    	ld	hl,4	;file not found/could not find 
000381 C9                  A   292    	ret			;exit	
000382                     A   293    iopen_ok:
000382 32 32 05            A   294    	ld		(in_handle),a
000385 5B210000 00         A   295    	ld.lil	hl,0
00038A 5B22 33 05 0B       A   296    	ld.lil	(counter+BASE),hl
00038F                     A   297    main_loop:
00038F CD 51 02            A   298    	call	inline_print
000392 0C110A68 65786475   A   299    	db		12,17,10,'hexdump utility - interac
00039A 6D702075 74696C69 
0003A2 7479202D 20696E74 
0003AA 65726163 74697665 
0003B2 206D6F64 65110F0D 
0003BA 0A 
0003BB 46696C65 6E616D65   A   300    	db		'Filename:',0
0003C3 3A00 
0003C5 5BDD2706            A   301    	LD.LIL		HL,(IX+6)
0003C9 CD 5F 02            A   302    	call	print_HL
0003CC CD 51 02            A   303    	call	inline_print
0003CF 0D0A0D0A 55736167   A   304    	db		CR,LF,CR,LF,'Usage instructions:',C
0003D7 6520696E 73747275 
0003DF 6374696F 6E733A0D 
0003E7 0A70202D 20707265 
0003EF 76696F75 730D0A6E 
0003F7 202D206E 6578740D 
0003FF 0A71202D 20717569 
000407 740D0A0D 0A00 
00040D CD 25 04            A   305    	call	sectorlp
000410                     A   306    key_valid:
                           A   307    	MOSCALL	mos_getkey
000414 FE6E                A   308    	cp		'n'
000416 CA D6 04            A   309    	jp		z,next_sector
000419 FE70                A   310    	cp		'p'
00041B CA F2 04            A   311    	jp		z,prev_sector
00041E FE71                A   312    	cp		'q'
000420 20 EE               A   313    	jr		nz,key_valid
000422 C3 7C 01            A   314    	jp		exit
                           A   315    
                           A   316    
                           A   317    
000425                     A   318    sectorlp:
000425 5B210000 00         A   319    	ld.lil	hl,0
                           A   320    ;	ld.lil	(counter+BASE),hl
00042A 5B22 37 05 0B       A   321    	ld.lil	(rows+BASE),hl
00042F 5B21 3D 05 0B       A   322    	ld.lil	hl,buffer+BASE
000434 5B110001 00         A   323    	ld.lil	de,256
000439 3A 32 05            A   324    	ld	a,(in_handle)
00043C 4F                  A   325    	ld	c,a
                           A   326    	MOSCALL	mos_fread
000441 7B                  A   327    	ld		a,e
000442 B2                  A   328    	or		d
000443 CA 30 02            A   329    	jp		z,hit_EOF		;zero length (DE=0)
000446 43                  A   330    	ld		b,e	;b will track length for next l
000447 0E00                A   331    	ld		c,0	;c will track current value in 
                           A   332    
000449                     A   333    seclp2:
                           A   334    ;	push	bc
                           A   335    		
                           A   336    
000449                     A   337    iprintlp:
                           A   338    
000449 5B2A 33 05 0B       A   339    	ld.lil	hl,(counter+BASE)
00044E 5BED5B 37 05 0B     A   340    	ld.lil	de,(rows+BASE)
000454 5B19                A   341    	add.lil	hl,de
                           A   342    ;	ld.lil	de,16
                           A   343    ;	add.lil	hl,de
                           A   344    ;	ld.lil	(counter+BASE),hl
000456 C5                  A   345    	push	bc
000457 CD 0A 05            A   346    	call	Print_Hex24
00045A C1                  A   347    	pop		bc
00045B C5                  A   348    	push	bc
00045C                     A   349    ihexloop:
00045C 3E3A                A   350    	ld		a,':'
00045E C5                  A   351    	push	bc
00045F D7                  A   352    	rst		10h
000460 C1                  A   353    	pop		bc
000461 21 3D 05            A   354    	ld		hl,buffer
000464 19                  A   355    	add		hl,de
                           A   356    ;	ld		c,0
000465                     A   357    ihexlp1:
000465 79                  A   358    	ld		a,c
000466 E603                A   359    	and		3
000468 20 05               A   360    	jr		nz,$f
00046A 3E20                A   361    	ld		a,' '
                           A   362    ;	push	hl
00046C C5                  A   363    	push	bc
00046D D7                  A   364    	rst		10h
00046E C1                  A   365    	pop		bc
                           A   366    ;	pop		hl
00046F                     A   367    $$:
                           A   368    
00046F 78                  A   369    	ld		a,b
000470 B7                  A   370    	or		a
000471 28 0B               A   371    	jr		z,ihexlp2
                           A   372    ;	ld		a,b
000473 B9                  A   373    	cp		c
000474 30 08               A   374    	jr		nc,ihexlp2
000476 3E20                A   375    	ld		a,' '
000478 C5                  A   376    	push	bc
000479 D7                  A   377    	rst		10h
00047A D7                  A   378    	rst		10h
00047B C1                  A   379    	pop		bc
00047C 18 09               A   380    	jr		ihexlp3
00047E                     A   381    ihexlp2:
00047E 7E                  A   382    	ld		a,(hl)
                           A   383    
00047F E5                  A   384    	push	hl
000480 C5                  A   385    	push	bc
000481 CD 1F 05            A   386    	call	Print_Hex8
000484 C1                  A   387    	pop		bc
000485 E1                  A   388    	pop		hl
000486 23                  A   389    	inc		hl
000487                     A   390    ihexlp3:
000487 0C                  A   391    	inc		c
000488 79                  A   392    	ld		a,c
000489 E60F                A   393    	and		15
00048B CA 90 04            A   394    	jp		z,ihexend
                           A   395    
                           A   396    ;	ld		a,c
                           A   397    ;	and		3
                           A   398    ;	jr		nz,$f
                           A   399    ;	ld		a,' '
                           A   400    ;	push	bc
                           A   401    ;	rst		10h
                           A   402    ;	pop		bc
                           A   403    ;$$:
00048E 18 D5               A   404    	jr		ihexlp1
                           A   405    
000490                     A   406    ihexend:
000490 3E20                A   407    	ld		a,' '
000492 D7                  A   408    	rst		10h
000493 C1                  A   409    	pop		bc		;recover c register.
000494                     A   410    iasciiloop:
000494 3E7C                A   411    	ld		a,'|'
000496 C5                  A   412    	push	bc
000497 D7                  A   413    	rst		10h
000498 C1                  A   414    	pop		bc
000499 21 3D 05            A   415    	ld		hl,buffer
00049C 19                  A   416    	add		hl,de
                           A   417    ;	ld		c,0
00049D                     A   418    iasciilp1:
00049D 78                  A   419    	ld		a,b
00049E B7                  A   420    	or		a
00049F 28 07               A   421    	jr		z,iasciilp2
                           A   422    ;	ld		a,b
0004A1 B9                  A   423    	cp		c
0004A2 30 04               A   424    	jr		nc,iasciilp2
0004A4 3E20                A   425    	ld		a,' '
0004A6 18 04               A   426    	jr		iasciilp3
0004A8                     A   427    iasciilp2:
0004A8 7E                  A   428    	ld		a,(hl)
0004A9 CD 47 02            A   429    	call	unprintable
0004AC                     A   430    iasciilp3:
0004AC E5                  A   431    	push	hl
0004AD C5                  A   432    	push	bc
0004AE D7                  A   433    	rst		10h
0004AF C1                  A   434    	pop		bc
0004B0 E1                  A   435    	pop		hl
0004B1 23                  A   436    	inc		hl
0004B2 0C                  A   437    	inc		c
0004B3 79                  A   438    	ld		a,c
0004B4 E60F                A   439    	and		15
                           A   440    ;	jp		z,iasciiend
                           A   441    ;	cp		b
                           A   442    ;	jr		c,iasciilp1
                           A   443    ;	ld		a,' '
                           A   444    ;	jr		iasciilp2
0004B6 20 E5               A   445    	jr		nz,iasciilp1
                           A   446    
0004B8                     A   447    iasciiend:
0004B8 CD 51 02            A   448    	call	inline_print
0004BB 7C0D0A00            A   449    	db		'|',CR,LF,0
0004BF 5B2A 37 05 0B       A   450    	ld.lil	hl,(rows+BASE)
0004C4 5B111000 00         A   451    	ld.lil	de,16
0004C9 5B19                A   452    	add.lil	hl,de
0004CB 5B22 37 05 0B       A   453    	ld.lil	(rows+BASE),hl
0004D0 7D                  A   454    	ld		a,l
0004D1 B7                  A   455    	or		a
0004D2 C2 49 04            A   456    	jp		nz,iprintlp
0004D5 C9                  A   457    	ret
                           A   458    
0004D6                     A   459    next_sector:
0004D6 5B2A 33 05 0B       A   460    	ld.lil	hl,(counter+BASE)
0004DB 5B110001 00         A   461    	ld.lil	de,256
0004E0 5B19                A   462    	add.lil	hl,de
0004E2                     A   463    seekit:
0004E2 5B22 33 05 0B       A   464    	ld.lil	(counter+BASE),hl
0004E7 3A 32 05            A   465    	ld		a,(in_handle)
0004EA 4F                  A   466    	ld		c,a
                           A   467    	MOSCALL	mos_flseek
0004EF C3 8F 03            A   468    	jp		main_loop
                           A   469    
                           A   470    
0004F2                     A   471    prev_sector:
0004F2 5B2A 33 05 0B       A   472    	ld.lil	hl,(counter+BASE)
0004F7 5B110001 00         A   473    	ld.lil	de,256
0004FC B7                  A   474    	or		a
0004FD 5BED52              A   475    	sbc.lil	hl,de
000500 30 E0               A   476    	jr		nc,seekit
000502 5B210000 00         A   477    	ld.lil	hl,0
000507 18 D9               A   478    	jr		seekit
                           A   479    
                           A   480    
                           A   481    
                           A   482    ;
                           A   483    ; data storage . . .
                           A   484    ;	
000509                     A   485    stringlength:
000509 04                  A   486    	db	4	;default of 4 characters
                           A   487    ; uninitialized storage/BSS but can't use that 
                           A   488    ;
                           A   489    ; RAM
                           A   490    ; 
                           A   491    			DEFINE	LORAM, SPACE = ROM
                           A   492    ;			ORDER	__VECTORS, CODE, LORAM
                           A   493    			SEGMENT LORAM
                           A   494    		
                           A   495    ;			SEGMENT	BSS
                           A   496    ;			SEGMENT CODE
                           A   497    
000532                     A   498    in_handle:	DS	1	;Only needs 1 byte handle
000533                     A   499    counter:	DS	4	; current address counter f
000537                     A   500    rows:		DS	4
00053B                     A   501    upcount:	DS	2	;upper 2 bytes for file loc
00053D                     A   502    buffer:		DS	512	;Space to buffer incoming s
00073D                     A   503    curbyte:	DS	1	;current byte in the buffer
00073E                     A   504    keycount:	DS	1	;current key count
                           A   505    	end


Errors: 0
Warnings: 0
Lines Assembled: 852
