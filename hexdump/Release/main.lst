Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED20-Aug-23     08:54:13     page:   1


PC     Object              I  Line    Source 
                           A     1    ; HEXDUMP utility
                           A     2    ;
                           A     3    ;
                           A     4    ; Written Agon native by Shawn Sijnstra
                           A     5    ;
                           A     6    ; Notable changes for reference:
                           A     7    ; required colons on all labels
                           A     8    ; labels are case sensitive
                           A     9    ; code is a reserved word and can't be used as 
                           A    10    ; numeric evaluations are done differently - ch
                           A    11    ; reserved word INCLUDE needs to be in upper ca
                           A    12    ; assembly source MUST be .asm, can't use e.g. 
                           A    13    ; supports defb as a synonym for db, but NOT de
                           A    14    ; labels can't start with @
                           A    15    ;
                           A    16    ; DESIGN OF WIDTH:
                           A    17    ; 6 chars for current byte
                           A    18    ; dddddd: XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX |
                           A    19    ; dddddd:XXXXXXXX XXXXXXXX XXXXXXXX XXXXXXXX|..
                           A    20    
                           A    21    
                           A    22    			.ASSUME	ADL = 0				
                           A    23    
                           B     0    			INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	Memory Dump - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/11/2022
                           B     5    ; Last Updated:	15/11/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    				
       0000FF00            B     9    RAM_Top:		EQU		0FF00h
       00000000            B    10    Stack_Top:		EQU		00000h	; Stack at top
                           B    11    	
                           B    12    ; For GPIO
                           B    13    ; PA not available on eZ80L92
                           B    14    ;
       00000096            B    15    PA_DR:			EQU		96h
       00000097            B    16    PA_DDR:			EQU		97h
       00000098            B    17    PA_ALT1:		EQU		98h
       00000099            B    18    PA_ALT2:		EQU		99h
       0000009A            B    19    PB_DR:          	EQU		9Ah
       0000009B            B    20    PB_DDR:        	 	EQU		9Bh
       0000009C            B    21    PB_ALT1:        	EQU		9Ch
       0000009D            B    22    PB_ALT2:        	EQU		9Dh
       0000009E            B    23    PC_DR:          	EQU		9Eh
       0000009F            B    24    PC_DDR:         	EQU		9Fh
       000000A0            B    25    PC_ALT1:        	EQU		A0h
       000000A1            B    26    PC_ALT2:        	EQU		A1h
       000000A2            B    27    PD_DR:          	EQU		A2h
       000000A3            B    28    PD_DDR:			EQU		A3h
       000000A4            B    29    PD_ALT1:		EQU		A4h
       000000A5            B    30    PD_ALT2:		EQU		A5h
                           B    31    	
       00000000            B    32    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    33    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    34    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    35    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    36    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    37    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    38    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    39    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    40    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    41    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    42    	
                           B    43    ; For serial.asm
                           B    44    ; 
       016E3600            B    45    BASE_CLOCK		EQU	24000000	; It's actually
                           B    46    
       00000003            B    47    BAUD_500000		EQU	BASE_CLOCK / (16 * 500000)
       00000006            B    48    BAUD_250000		EQU	BASE_CLOCK / (16 * 250000)
       0000000C            B    49    BAUD_125000		EQU	BASE_CLOCK / (16 * 125000)
       0000004E            B    50    BAUD_19200		EQU	BASE_CLOCK / (16 * 19200)	
                           B    51    
                           B    52    ; For interrupts.asm
                           B    53    ;
                           B    54    
                           B    55    ;UARTs
                           B    56    ;
       00000018            B    57    UART0_IVECT		EQU		18h
       0000001A            B    58    UART1_IVECT		EQU		1Ah
                           B    59    
                           B    60    ;Ports
                           B    61    ;
       00000030            B    62    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    63    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    64    PB2_IVECT  	  	EQU   	34h
       00000036            B    65    PB3_IVECT  	  	EQU   	36h
       00000038            B    66    PB4_IVECT    		EQU   	38h
       0000003A            B    67    PB5_IVECT    		EQU   	3Ah
       0000003C            B    68    PB6_IVECT    		EQU   	3Ch
       0000003E            B    69    PB7_IVECT    		EQU   	3Eh
                           B    70                           
       00000040            B    71    PC0_IVECT    		EQU   	40h
       00000042            B    72    PC1_IVECT    		EQU   	42h
       00000044            B    73    PC2_IVECT    		EQU   	44h
       00000046            B    74    PC3_IVECT    		EQU   	46h
       00000048            B    75    PC4_IVECT    		EQU   	48h
       0000004A            B    76    PC5_IVECT    		EQU   	4Ah
       0000004C            B    77    PC6_IVECT    		EQU   	4Ch
       0000004E            B    78    PC7_IVECT    		EQU   	4Eh
                           B    79                           
       00000050            B    80    PD0_IVECT    		EQU   	50h
       00000052            B    81    PD1_IVECT    		EQU   	52h
       00000054            B    82    PD2_IVECT    		EQU   	54h
       00000056            B    83    PD3_IVECT    		EQU   	56h
       00000058            B    84    PD4_IVECT    		EQU   	58h
       0000005A            B    85    PD5_IVECT    		EQU   	5Ah
       0000005C            B    86    PD6_IVECT    		EQU   	5Ch
       0000005E            B    87    PD7_IVECT    		EQU   	5Eh
                           B    88    
                           B    89    ; Originally in main.asm
                           B    90    ;
       0000000D            B    91    CR:			EQU     0DH
       0000000A            B    92    LF:			EQU     0AH
       0000001B            B    93    ESC:			EQU     1BH
                           B     0    			INCLUDE "mos_api.inc"	; In MOS/sr
                           B     1    ;
                           B     2    ; Title:	AGON MOS - API for user projects
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	03/08/2022
                           B     5    ; Last Updated:	15/04/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 05/08/2022:	Added mos_feof
                           B     9    ; 09/08/2022:	Added system variables: cursorX
                           B    10    ; 18/08/2022:	Added system variables: scrchar
                           B    11    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
                           B    12    ; 24/09/2022:	Added mos_getError, mos_mkdir
                           B    13    ; 13/10/2022:	Added mos_oscli
                           B    14    ; 23/02/2023:	Added more sysvars, fixed typo 
                           B    15    ; 04/03/2023:	Added sysvar_scrpixelIndex
                           B    16    ; 08/03/2023:	Renamed sysvar_keycode to sysva
                           B    17    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos
                           B    18    ; 21/03/2023:	Added mos_setintvector, sysvars
                           B    19    ; 22/03/2023:	The VDP commands are now indexe
                           B    20    ; 29/03/2023:	Added mos_uopen, mos_uclose, mo
                           B    21    ; 13/04/2023:	Added FatFS file structures (FF
                           B    22    ; 15/04/2023:	Added mos_getfil, mos_fread, mo
                           B    23    
                           B    24    ; VDP control (VDU 23, 0, n)
                           B    25    ;
       00000080            B    26    vdp_gp:			EQU 	80h
       00000081            B    27    vdp_keycode:		EQU 	81h
       00000082            B    28    vdp_cursor:		EQU	82h
       00000083            B    29    vdp_scrchar:		EQU	83h
       00000084            B    30    vdp_scrpixel:		EQU	84h
       00000085            B    31    vdp_audio:		EQU	85h
       00000086            B    32    vdp_mode:		EQU	86h
       00000087            B    33    vdp_rtc:		EQU	87h
       00000088            B    34    vdp_keystate:		EQU	88h
       000000C0            B    35    vdp_logicalcoords:	EQU	C0h
       000000FF            B    36    vdp_terminalmode:	EQU	FFh
                           B    37    
                           B    38    ; MOS high level functions
                           B    39    ;
       00000000            B    40    mos_getkey:		EQU	00h
       00000001            B    41    mos_load:		EQU	01h
       00000002            B    42    mos_save:		EQU	02h
       00000003            B    43    mos_cd:			EQU	03h
       00000004            B    44    mos_dir:		EQU	04h
       00000005            B    45    mos_del:		EQU	05h
       00000006            B    46    mos_ren:		EQU	06h
       00000007            B    47    mos_mkdir:		EQU	07h
       00000008            B    48    mos_sysvars:		EQU	08h
       00000009            B    49    mos_editline:		EQU	09h
       0000000A            B    50    mos_fopen:		EQU	0Ah
       0000000B            B    51    mos_fclose:		EQU	0Bh
       0000000C            B    52    mos_fgetc:		EQU	0Ch
       0000000D            B    53    mos_fputc:		EQU	0Dh
       0000000E            B    54    mos_feof:		EQU	0Eh
       0000000F            B    55    mos_getError:		EQU	0Fh
       00000010            B    56    mos_oscli:		EQU	10h
       00000011            B    57    mos_copy:		EQU	11h
       00000012            B    58    mos_getrtc:		EQU	12h
       00000013            B    59    mos_setrtc:		EQU	13h
       00000014            B    60    mos_setintvector:	EQU	14h
       00000015            B    61    mos_uopen:		EQU	15h
       00000016            B    62    mos_uclose:		EQU	16h
       00000017            B    63    mos_ugetc:		EQU	17h
       00000018            B    64    mos_uputc:		EQU 	18h
       00000019            B    65    mos_getfil:		EQU	19h
       0000001A            B    66    mos_fread:		EQU	1Ah
       0000001B            B    67    mos_fwrite:		EQU	1Bh
       0000001C            B    68    mos_flseek:		EQU	1Ch
                           B    69    
                           B    70    ; FatFS file access functions
                           B    71    ;
       00000080            B    72    ffs_fopen:		EQU	80h
       00000081            B    73    ffs_fclose:		EQU	81h
       00000082            B    74    ffs_fread:		EQU	82h
       00000083            B    75    ffs_fwrite:		EQU	83h
       00000084            B    76    ffs_flseek:		EQU	84h
       00000085            B    77    ffs_ftruncate:		EQU	85h
       00000086            B    78    ffs_fsync:		EQU	86h
       00000087            B    79    ffs_fforward:		EQU	87h
       00000088            B    80    ffs_fexpand:		EQU	88h
       00000089            B    81    ffs_fgets:		EQU	89h
       0000008A            B    82    ffs_fputc:		EQU	8Ah
       0000008B            B    83    ffs_fputs:		EQU	8Bh
       0000008C            B    84    ffs_fprintf:		EQU	8Ch
       0000008D            B    85    ffs_ftell:		EQU	8Dh
       0000008E            B    86    ffs_feof:		EQU	8Eh
       0000008F            B    87    ffs_fsize:		EQU	8Fh
       00000090            B    88    ffs_ferror:		EQU	90h
                           B    89    
                           B    90    ; FatFS directory access functions
                           B    91    ;
       00000091            B    92    ffs_dopen:		EQU	91h
       00000092            B    93    ffs_dclose:		EQU	92h
       00000093            B    94    ffs_dread:		EQU	93h
       00000094            B    95    ffs_dfindfirst:		EQU	94h
       00000095            B    96    ffs_dfindnext:		EQU	95h
                           B    97    
                           B    98    ; FatFS file and directory management functions
                           B    99    ;
       00000096            B   100    ffs_stat:		EQU	96h
       00000097            B   101    ffs_unlink:		EQU	97h
       00000098            B   102    ffs_rename:		EQU	98h
       00000099            B   103    ffs_chmod:		EQU	99h
       0000009A            B   104    ffs_utime:		EQU	9Ah
       0000009B            B   105    ffs_mkdir:		EQU	9Bh
       0000009C            B   106    ffs_chdir:		EQU	9Ch
       0000009D            B   107    ffs_chdrive:		EQU	9Dh
       0000009E            B   108    ffs_getcwd:		EQU	9Eh
                           B   109    
                           B   110    ; FatFS volume management and system configurat
                           B   111    ;
       0000009F            B   112    ffs_mount:		EQU	9Fh
       000000A0            B   113    ffs_mkfs:		EQU	A0h
       000000A1            B   114    ffs_fdisk		EQU	A1h
       000000A2            B   115    ffs_getfree:		EQU	A2h
       000000A3            B   116    ffs_getlabel:		EQU	A3h
       000000A4            B   117    ffs_setlabel:		EQU	A4h
       000000A5            B   118    ffs_setcp:		EQU	A5h
                           B   119    	
                           B   120    ; File access modes
                           B   121    ;
       00000001            B   122    fa_read:		EQU	01h
       00000002            B   123    fa_write:		EQU	02h
       00000000            B   124    fa_open_existing:	EQU	00h
       00000004            B   125    fa_create_new:		EQU	04h
       00000008            B   126    fa_create_always:	EQU	08h
       00000010            B   127    fa_open_always:		EQU	10h
       00000030            B   128    fa_open_append:		EQU	30h
                           B   129    	
                           B   130    ; System variable indexes for api_sysvars
                           B   131    ; Index into _sysvars in globals.asm
                           B   132    ;
       00000000            B   133    sysvar_time:		EQU	00h	; 4: Clock timer in
       00000004            B   134    sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indic
       00000005            B   135    sysvar_keyascii:	EQU	05h	; 1: ASCII keycode,
       00000006            B   136    sysvar_keymods:		EQU	06h	; 1: Keycode modifi
       00000007            B   137    sysvar_cursorX:		EQU	07h	; 1: Cursor X posit
       00000008            B   138    sysvar_cursorY:		EQU	08h	; 1: Cursor Y posit
       00000009            B   139    sysvar_scrchar:		EQU	09h	; 1: Character read
       0000000A            B   140    sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data rea
       0000000D            B   141    sysvar_audioChannel:	EQU	0Dh	; 1: Audio chan
       0000000E            B   142    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio chan
       0000000F            B   143    sysvar_scrWidth:	EQU	0Fh	; 2: Screen width i
       00000011            B   144    sysvar_scrHeight:	EQU	11h	; 2: Screen height 
       00000013            B   145    sysvar_scrCols:		EQU	13h	; 1: Screen columns
       00000014            B   146    sysvar_scrRows:		EQU	14h	; 1: Screen rows in
       00000015            B   147    sysvar_scrColours:	EQU	15h	; 1: Number of colo
       00000016            B   148    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of p
       00000017            B   149    sysvar_vkeycode:	EQU	17h	; 1: Virtual key co
       00000018            B   150    sysvar_vkeydown		EQU	18h	; 1: Virtual key st
       00000019            B   151    sysvar_vkeycount:	EQU	19h	; 1: Incremented ev
       0000001A            B   152    sysvar_rtc:		EQU	1Ah	; 8: Real time clock da
       00000022            B   153    sysvar_keydelay:	EQU	22h	; 2: Keyboard repea
       00000024            B   154    sysvar_keyrate:		EQU	24h	; 2: Keyboard repea
       00000026            B   155    sysvar_keyled:		EQU	26h	; 1: Keyboard LED s
                           B   156    	
                           B   157    ; Flags for the VPD protocol
                           B   158    ;
       00000001            B   159    vdp_pflag_cursor:	EQU	00000001b
       00000002            B   160    vdp_pflag_scrchar:	EQU	00000010b
       00000004            B   161    vdp_pflag_point:	EQU	00000100b
       00000008            B   162    vdp_pflag_audio:	EQU	00001000b
       00000010            B   163    vdp_pflag_mode:		EQU	00010000b
       00000020            B   164    vdp_pflag_rtc:		EQU	00100000b
                           B   165    
                           B   166    ;
                           B   167    ; FatFS structures
                           B   168    ; These mirror the structures contained in src_
                           B   169    ;
                           B   170    ; Object ID and allocation information (FFOBJID
                           B   171    ;
                           B   172    FFOBJID	.STRUCT
000000                     B   173    	fs:		DS	3	; Pointer to the hosting vo
000003                     B   174    	id:		DS	2	; Hosting volume mount ID
000005                     B   175    	attr:		DS	1	; Object attribute
000006                     B   176    	stat:		DS	1	; Object chain status (
000007                     B   177    	sclust:		DS	4	; Object data start clu
00000B                     B   178    	objsize:	DS	4	; Object size (valid wh
       0000000F            B   179    FFOBJID_SIZE .ENDSTRUCT FFOBJID
                           B   180    ;
                           B   181    ; File object structure (FIL)
                           B   182    ;
                           B   183    FIL .STRUCT
000000                     B   184    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   185    	flag:		DS	1	; File status flags
000010                     B   186    	err:		DS	1	; Abort flag (error cod
000011                     B   187    	fptr:		DS	4	; File read/write point
000015                     B   188    	clust:		DS	4	; Current cluster of fp
000019                     B   189    	sect:		DS	4	; Sector number appeari
00001D                     B   190    	dir_sect:	DS	4	; Sector number contain
000021                     B   191    	dir_ptr:	DS	3	; Pointer to the direct
       00000024            B   192    FIL_SIZE .ENDSTRUCT FIL
                           B   193    ;
                           B   194    ; Directory object structure (DIR)
                           B   195    ; 
                           B   196    DIR .STRUCT
000000                     B   197    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   198    	dptr:		DS	4	; Current read/write of
000013                     B   199    	clust:		DS	4	; Current cluster
000017                     B   200    	sect:		DS	4	; Current sector (0:Rea
00001B                     B   201    	dir:		DS	3	; Pointer to the direct
00001E                     B   202    	fn:		DS	12	; SFN (in/out) {body[8],ext
00002A                     B   203    	blk_ofs:	DS	4	; Offset of current ent
       0000002E            B   204    DIR_SIZE .ENDSTRUCT DIR
                           B   205    ;
                           B   206    ; File information structure (FILINFO)
                           B   207    ;
                           B   208    FILINFO .STRUCT
000000                     B   209    	fsize:		DS 	4	; File size
000004                     B   210    	fdate:		DS	2	; Modified date
000006                     B   211    	ftime:		DS	2	; Modified time
000008                     B   212    	fattrib:	DS	1	; File attribute
000009                     B   213    	altname:	DS	13	; Alternative file name
000016                     B   214    	fname:		DS	256	; Primary file name
       00000116            B   215    FILINFO_SIZE .ENDSTRUCT FILINFO
                           B   216    
                           B   217    ;
                           B   218    ; Macro for calling the API
                           B   219    ; Parameters:
                           B   220    ; - function: One of the function numbers liste
                           B   221    ;
                           B   222    MOSCALL:		MACRO	function
                           B   223    			LD	A, function
                           B   224    			RST.LIS	08h
                           B   225    			ENDMACRO 	
                           B   226    ;
                           A    26    
                           A    27    			SEGMENT CODE
                           A    28    	
                           A    29    			XDEF	_main
                           A    30    			XREF	Print_Hex24
                           A    31    			XREF	Print_Hex16
                           A    32    			XREF	Print_Hex8
                           A    33    			
                           A    34    ; Error: Invalid parameter
                           A    35    ;
000145 211300              A    36    _err_invalid_param:	LD		HL, 19			; T
000148 C9                  A    37    			RET
                           A    38    
                           A    39    
                           A    40    ; ASCII
                           A    41    ;
       00000003            A    42    CtrlC:	equ	03h
                           A    43    CR:	equ	0Dh
                           A    44    LF:	equ	0Ah
       0000001A            A    45    CtrlZ:	equ	1Ah
                           A    46    ;
       000B0000            A    47    BASE:	equ	0b0000h
                           A    48    
000149                     A    49    _main:
000149 79                  A    50    	ld	a,c	;AGON - number of parameters
00014A 3D                  A    51    	dec	a
00014B CA 8B 02            A    52    	jp	z,okusage
00014E FE03                A    53    	cp	3	;too many parameters
000150 D2 91 02            A    54    	jp	nc,badusage
                           A    55    
000153 5BDD2703            A    56    	LD.LIL		HL,(IX+3)		; HLU: pointer 
000157 5B7E                A    57    	ld.LIL	a,(HL)
000159 FE2D                A    58    	cp	'-'
00015B C2 77 03            A    59    	jp	nz,interactive
00015E 5B23                A    60    	INC.LIL	HL
000160 5B7E                A    61    	LD.LIL	a,(HL)				;24 bit
000162 FE63                A    62    	cp	'c'
000164 C2 91 02            A    63    	jp	nz,badusage
                           A    64    ;	jp	interactive
000167 5BDD2706            A    65    	LD.LIL		HL,(IX+6)		; HLU: pointer 
00016B                     A    66    openit:
00016B 0E01                A    67    	ld	c,fa_read	;open read-only for straigh
                           A    68    	MOSCALL	mos_fopen
000171 B7                  A    69    	or	a
000172 20 0E               A    70    	jr	nz,open_ok
000174 210400              A    71    	ld	hl,4	;file not found/could not find 
000177 C9                  A    72    	ret			;exit
                           A    73    ;
                           A    74    ;
                           A    75    ; Close and exit routines
                           A    76    ;
                           A    77    
000178                     A    78    close:
                           A    79    ;C: Filehandle, or 0 to close all open files
                           A    80    ;returns number of still open files - how about
                           A    81    
000178 0E00                A    82    	ld	c,0
                           A    83    	MOSCALL	mos_fclose	
                           A    84    
00017E                     A    85    exit:
00017E 210000              A    86    	ld	hl,0	;for Agon - successful exit
000181 C9                  A    87    	ret
                           A    88    ;
                           A    89    ;
000182                     A    90    open_ok:
                           A    91    
000182 32 AC 06            A    92    	ld	(in_handle),a	;store the file handle 
                           A    93    	MOSCALL	mos_sysvars	;get the sysvars locati
000189 DD7E19              A    94    	ld	a,(IX+sysvar_vkeycount)	;fetch keycount
00018C 32 C0 08            A    95    	ld	(keycount),a	;store to compare again
00018F 5B21F0FF FF         A    96    	ld.lil	hl,0-16
000194 5B22 AD 06 0B       A    97    	ld.lil	(counter+BASE),hl
                           A    98    
000199                     A    99    printlp:
                           A   100    
                           A   101    
000199 5B21 BF 06 0B       A   102    	ld.lil	hl,buffer+BASE
00019E 5B111000 00         A   103    	ld.lil	de,16
0001A3 3A AC 06            A   104    	ld	a,(in_handle)
0001A6 4F                  A   105    	ld	c,a
                           A   106    	MOSCALL	mos_fread
0001AB 7B                  A   107    	ld		a,e
0001AC B7                  A   108    	or		a
0001AD CA 2C 02            A   109    	jp		z,donefile
0001B0 47                  A   110    	ld		b,a	;b will track length for next l
0001B1 5B2A AD 06 0B       A   111    	ld.lil	hl,(counter+BASE)
0001B6 5B111000 00         A   112    	ld.lil	de,16
0001BB 5B19                A   113    	add.lil	hl,de
0001BD 5B22 AD 06 0B       A   114    	ld.lil	(counter+BASE),hl
0001C2 C5                  A   115    	push	bc
0001C3 CD 84 06            A   116    	call	Print_Hex24
0001C6 C1                  A   117    	pop		bc
0001C7                     A   118    hexloop:
0001C7 3E3A                A   119    	ld		a,':'
0001C9 D7                  A   120    	rst		10h
0001CA 21 BF 06            A   121    	ld		hl,buffer
0001CD 0E00                A   122    	ld		c,0
0001CF                     A   123    hexlp1:
0001CF 79                  A   124    	ld		a,c
0001D0 E603                A   125    	and		3
0001D2 20 07               A   126    	jr		nz,$f
0001D4 3E20                A   127    	ld		a,' '
0001D6 E5                  A   128    	push	hl
0001D7 C5                  A   129    	push	bc
0001D8 D7                  A   130    	rst		10h
0001D9 C1                  A   131    	pop		bc
0001DA E1                  A   132    	pop		hl
0001DB                     A   133    $$:
0001DB 7E                  A   134    	ld		a,(hl)
                           A   135    
0001DC E5                  A   136    	push	hl
0001DD C5                  A   137    	push	bc
0001DE CD 99 06            A   138    	call	Print_Hex8
0001E1 C1                  A   139    	pop		bc
0001E2 E1                  A   140    	pop		hl
0001E3 23                  A   141    	inc		hl
0001E4                     A   142    hexlp2:
0001E4 0C                  A   143    	inc		c
0001E5 79                  A   144    	ld		a,c
0001E6 FE10                A   145    	cp		16
0001E8 CA FC 01            A   146    	jp		z,hexend
0001EB B8                  A   147    	cp		b
0001EC 38 E1               A   148    	jr		c,hexlp1
0001EE 3E20                A   149    	ld		a,' '
0001F0 D7                  A   150    	rst		10h
0001F1 D7                  A   151    	rst		10h
0001F2 79                  A   152    	ld		a,c
0001F3 E603                A   153    	and		3
0001F5 20 03               A   154    	jr		nz,$f
0001F7 3E20                A   155    	ld		a,' '
0001F9 D7                  A   156    	rst		10h
0001FA                     A   157    $$:
0001FA 18 E8               A   158    	jr		hexlp2
                           A   159    
0001FC                     A   160    hexend:
0001FC 3E20                A   161    	ld		a,' '
0001FE D7                  A   162    	rst		10h
                           A   163    
0001FF                     A   164    asciiloop:
0001FF 3E7C                A   165    	ld		a,'|'
000201 D7                  A   166    	rst		10h
000202 21 BF 06            A   167    	ld		hl,buffer
000205 0E00                A   168    	ld		c,0
000207                     A   169    asciilp1:
000207 7E                  A   170    	ld		a,(hl)
000208 CD 4C 02            A   171    	call	unprintable
00020B                     A   172    asciilp2:
00020B E5                  A   173    	push	hl
00020C C5                  A   174    	push	bc
00020D D7                  A   175    	rst		10h
00020E C1                  A   176    	pop		bc
00020F E1                  A   177    	pop		hl
000210 23                  A   178    	inc		hl
000211 0C                  A   179    	inc		c
000212 79                  A   180    	ld		a,c
000213 FE10                A   181    	cp		16
000215 CA 1F 02            A   182    	jp		z,asciiend
000218 B8                  A   183    	cp		b
000219 38 EC               A   184    	jr		c,asciilp1
00021B 3E20                A   185    	ld		a,' '
00021D 18 EC               A   186    	jr		asciilp2
                           A   187    
00021F                     A   188    asciiend:
00021F CD 56 02            A   189    	call	inline_print
000222 7C0D0A00            A   190    	db		'|',CR,LF,0	
000226 CD 6A 02            A   191    	call	ck_ctrlC	;check at the end of th
000229 C3 99 01            A   192    	jp		printlp
                           A   193    
                           A   194    
                           A   195    
00022C                     A   196    donefile:
00022C CD 56 02            A   197    	call	inline_print
00022F 0D0A00              A   198    	db		CR,LF,0
000232 C3 78 01            A   199    	jp		close
                           A   200    
000235                     A   201    hit_EOF:
000235 CD 56 02            A   202    	call	inline_print
000238 50617374 20656E64   A   203    	db		'Past end of file',CR,LF,0
000240 206F6620 66696C65 
000248 0D0A00 
00024B C9                  A   204    	ret
                           A   205    
                           A   206    ; Entry:
                           A   207    ; A is a character to test
                           A   208    ; Exit:
                           A   209    ; unprintable character converted to a '.'
00024C                     A   210    unprintable:
00024C FE20                A   211    	cp	' '
00024E 38 03               A   212    	jr	c,$f
000250 FE7F                A   213    	cp	127
000252 D8                  A   214    	ret	c	;always nz
000253 3E2E                A   215    $$:	ld	a,'.'	;xor	a	;sets 0 flag
000255 C9                  A   216    	ret
                           A   217    ;
                           A   218    ; Prints string directly after the call
                           A   219    ;
000256 E1                  A   220    inline_print:	pop	hl
000257 CD 5D 02            A   221    	call	print_string
00025A E9                  A   222    	jp	(hl)
                           A   223    ;
                           A   224    ; more efficient print string for strings > 1 c
00025B                     A   225    $$:
00025B D7                  A   226    	rst	10h	;Agon uses this to print the charac
00025C 23                  A   227    	inc	hl
00025D 7E                  A   228    print_string:	ld	a,(hl)
00025E B7                  A   229    	or	a
00025F 20 FA               A   230    	jr	nz,$b
000261 C9                  A   231    	ret
                           A   232    ;
                           A   233    ;
000262                     A   234    $$:
000262 D7                  A   235    	rst	10h	;Agon uses this to print the charac
000263 23                  A   236    	inc	hl
000264 7E                  A   237    print_HL:	ld	a,(hl)
000265 FE20                A   238    	cp	32
000267 30 F9               A   239    	jr	nc,$b
000269 C9                  A   240    	ret
                           A   241    
                           A   242    
                           A   243    ; Check for ctrl-C. If so, clean stack and exit
                           A   244    ;
00026A                     A   245    ck_ctrlC:
                           A   246    ;	ld	a,1		; modified below by self modify
                           A   247    ;	dec	a
                           A   248    ;	and	7
                           A   249    ;	ld	(ck_ctrlC+1),a	; update LD A instructi
                           A   250    ;	ret	nz		; check every 8 calls only
                           A   251    	MOSCALL	mos_sysvars	;get the sysvars locati
00026E 5BDD7E19            A   252    	ld.lil	a,(IX+sysvar_vkeycount)	;check if a
000272 21 C0 08            A   253    	ld	hl,keycount
000275 BE                  A   254    	cp	(hl)	;compare against keycount for c
000276 C8                  A   255    	ret	z
000277 77                  A   256    	ld	(hl),a	;update keycount
000278 5BDD7E05            A   257    	ld.lil	a,(IX+sysvar_keyascii)	;fetch char
00027C FE1B                A   258    	cp	27	;accept an ESC as well
00027E 28 07               A   259    	jr	z,$f
000280 FE71                A   260    	cp	'q'	;accept 'q' for consistency
000282 28 03               A   261    	jr	z,$f
000284 FE03                A   262    	cp	3	;is it ctr-C
000286 C0                  A   263    	ret	nz
000287                     A   264    $$:
000287 E1                  A   265    	pop	hl		;clean up stack
                           A   266    ;	pop	hl
000288 C3 78 01            A   267    	jp	close
                           A   268    
00028B CD 97 02            A   269    okusage:	call usage
00028E C3 7E 01            A   270    	jp	exit
                           A   271    
000291 CD 97 02            A   272    badusage:	call usage
000294 C3 45 01            A   273    	jp	_err_invalid_param
                           A   274    ;
                           A   275    ; usage -- show syntax
                           A   276    ; 
000297 CD 56 02            A   277    usage:	call	inline_print
00029A 0D0A6865 7864756D   A   278    	db	CR,LF,'hexdump utility for Agon by Shaw
0002A2 70207574 696C6974 
0002AA 7920666F 72204167 
0002B2 6F6E2062 79205368 
0002BA 61776E20 53696A6E 
0002C2 73747261 20286329 
0002CA 2031372D 4A756E2D 
0002D2 32303233 0D0A0D0A 
0002DA 55736167 653A0D0A   A   279    	db	'Usage:',CR,LF
0002E2 20202068 65786475   A   280    	db	'   hexdump [-c] <file>',CR,LF,CR,LF
0002EA 6D70205B 2D635D20 
0002F2 3C66696C 653E0D0A 
0002FA 0D0A 
0002FC 096F7074 696F6E61   A   281    	db	'	optional paramter c uses hexdump in
000304 6C207061 72616D74 
00030C 65722063 20757365 
000314 73206865 7864756D 
00031C 7020696E 20636F6E 
000324 74696E75 6F757320 
00032C 6D6F6465 2E0D0A 
000333 53746F72 65206865   A   282    	db 	'Store hexdump.bin in /mos directory. M
00033B 7864756D 702E6269 
000343 6E20696E 202F6D6F 
00034B 73206469 72656374 
000353 6F72792E 204D696E 
00035B 696D756D 204D4F53 
000363 20766572 73696F6E 
00036B 20312E30 332E0D0A 
000373 0D0A00 
000376 C9                  A   283    	ret
                           A   284    
                           A   285    ;
                           A   286    ;
                           A   287    ; Arrow key mapping
                           A   288    ; 8,11,10,21 = L,U,D,R
                           A   289    ;
                           A   290    ;
000377                     A   291    interactive:
                           A   292    ;	LD.LIL		HL,(IX+6)		; HLU: pointer 
000377 0E01                A   293    	ld	c,fa_read	;open read-only for straigh
                           A   294    	MOSCALL	mos_fopen
00037D B7                  A   295    	or	a
00037E 20 04               A   296    	jr	nz,iopen_ok
000380 210400              A   297    	ld	hl,4	;file not found/could not find 
000383 C9                  A   298    	ret			;exit	
000384                     A   299    iopen_ok:
000384 32 AC 06            A   300    	ld		(in_handle),a
000387 5B210000 00         A   301    	ld.lil	hl,0
00038C 5B22 AD 06 0B       A   302    	ld.lil	(counter+BASE),hl
000391                     A   303    main_loop:
000391 CD 56 02            A   304    	call	inline_print
000394 0C110A68 65786475   A   305    	db		12,17,10,'hexdump utility - interac
00039C 6D702075 74696C69 
0003A4 7479202D 20696E74 
0003AC 65726163 74697665 
0003B4 206D6F64 65110F0D 
0003BC 0A 
0003BD 46696C65 6E616D65   A   306    	db		'Filename:',0
0003C5 3A00 
0003C7 5BDD2703            A   307    	LD.LIL		HL,(IX+3)
0003CB CD 64 02            A   308    	call	print_HL
0003CE CD 56 02            A   309    	call	inline_print
0003D1 0D0A0D0A 55736167   A   310    	db		CR,LF,CR,LF,'Usage instructions:',C
0003D9 6520696E 73747275 
0003E1 6374696F 6E733A0D 
0003E9 0A 
0003EA 70202D20 70726576   A   311    	db		'p - previous 100h bytes  - - previ
0003F2 696F7573 20313030 
0003FA 68206279 74657320 
000402 202D202D 20707265 
00040A 76696F75 73206279 
000412 74650D0A 
000416 6E202D20 6E657874   A   312    	db		'n - next 100h bytes      + - next 
00041E 20313030 68206279 
000426 74657320 20202020 
00042E 202B202D 206E6578 
000436 74206279 74650D0A 
00043E 67202D20 676F2074   A   313    	db		'g - go to hex location   arrows - 
000446 6F206865 78206C6F 
00044E 63617469 6F6E2020 
000456 20617272 6F777320 
00045E 2D206E61 76696761 
000466 74650D0A 
00046A 71202D20 71756974   A   314    	db		'q - quit',CR,LF,CR,LF,CR,LF,0
000472 0D0A0D0A 0D0A00 
000479 5B210000 00         A   315    	ld.lil	hl,0	
00047E CD CD 04            A   316    	call	sectorlp
000481 5B210001 00         A   317    	ld.lil	hl,256
000486 CD CD 04            A   318    	call	sectorlp
000489                     A   319    key_invalid:
000489 3E1F                A   320    	ld		a,31
00048B D7                  A   321    	rst		10h
00048C 3E00                A   322    	ld		a,0
00048E D7                  A   323    	rst		10h
00048F 3E2B                A   324    	ld		a,43
000491 D7                  A   325    	rst		10h
                           A   326    	MOSCALL	mos_getkey
000496 21 AF 04            A   327    	LD		HL,key_options
000499 01 0A 00            A   328    	LD		BC,key_table-key_options
00049C EDB1                A   329    	CPIR
00049E 20 E9               A   330    	jr		nz,key_invalid
0004A0 79                  A   331    	ld		a,c
0004A1 87                  A   332    	add		a,a
0004A2 010000              A   333    	ld		bc,0
0004A5 4F                  A   334    	ld		c,a
0004A6 21 B9 04            A   335    	ld		hl,key_table
0004A9 09                  A   336    	add		hl,bc
0004AA 7E                  A   337    	ld		a,(hl)
0004AB 23                  A   338    	inc		hl
0004AC 66                  A   339    	ld		h,(hl)
0004AD 6F                  A   340    	ld		l,a
0004AE E9                  A   341    	jp		(hl)
                           A   342    
                           A   343    ;table below has keys and jumps for each keypre
0004AF                     A   344    key_options:
0004AF 6E702B2D 080B0A15   A   345    	db		'np+-',8,11,10,21,'gq'
0004B7 6771 
0004B9                     A   346    key_table:
0004B9 7E01 EE05 8B05      A   347    	dw		exit,goto,next_byte,go_down,go_up,p
0004BF 7D05 E205 C905 
0004C5 C905 8B05 B205 
0004CB 9605 
                           A   348    
                           A   349    
0004CD                     A   350    sectorlp:
                           A   351    
                           A   352    ;	ld.lil	(counter+BASE),hl
0004CD 5B22 B1 06 0B       A   353    	ld.lil	(rows+BASE),hl
0004D2 5B11 BF 06 0B       A   354    	ld.lil	de,buffer+BASE
0004D7 5B19                A   355    	add.lil	hl,de
0004D9 5B110001 00         A   356    	ld.lil	de,256
0004DE 3A AC 06            A   357    	ld	a,(in_handle)
0004E1 4F                  A   358    	ld	c,a
                           A   359    	MOSCALL	mos_fread
0004E6 7B                  A   360    	ld		a,e
0004E7 B2                  A   361    	or		d
0004E8 CA 35 02            A   362    	jp		z,hit_EOF		;zero length (DE=0)
0004EB 43                  A   363    	ld		b,e	;b will track length for next l
0004EC 0E00                A   364    	ld		c,0	;c will track current value in 
                           A   365    
0004EE                     A   366    seclp2:
                           A   367    ;	push	bc
                           A   368    		
                           A   369    
0004EE                     A   370    iprintlp:
                           A   371    
0004EE 5B2A AD 06 0B       A   372    	ld.lil	hl,(counter+BASE)
0004F3 5BED5B B1 06 0B     A   373    	ld.lil	de,(rows+BASE)
0004F9 5B19                A   374    	add.lil	hl,de
                           A   375    ;	ld.lil	de,16
                           A   376    ;	add.lil	hl,de
                           A   377    ;	ld.lil	(counter+BASE),hl
0004FB C5                  A   378    	push	bc
0004FC CD 84 06            A   379    	call	Print_Hex24
0004FF C1                  A   380    	pop		bc
000500 C5                  A   381    	push	bc
                           A   382    ;	ld		d,0		;ignore 2nd 100h block offs
000501                     A   383    ihexloop:
000501 3E3A                A   384    	ld		a,':'
000503 C5                  A   385    	push	bc
000504 D7                  A   386    	rst		10h
000505 C1                  A   387    	pop		bc
000506 21 BF 06            A   388    	ld		hl,buffer
000509 19                  A   389    	add		hl,de
                           A   390    ;	ld		c,0
00050A                     A   391    ihexlp1:
00050A 79                  A   392    	ld		a,c
00050B E603                A   393    	and		3
00050D 20 05               A   394    	jr		nz,$f
00050F 3E20                A   395    	ld		a,' '
                           A   396    ;	push	hl
000511 C5                  A   397    	push	bc
000512 D7                  A   398    	rst		10h
000513 C1                  A   399    	pop		bc
                           A   400    ;	pop		hl
000514                     A   401    $$:
                           A   402    
000514 78                  A   403    	ld		a,b
000515 B7                  A   404    	or		a
000516 28 0D               A   405    	jr		z,ihexlp2
                           A   406    ;	ld		a,b
000518 B9                  A   407    	cp		c
000519 28 02               A   408    	jr		z,$F
00051B 30 08               A   409    	jr		nc,ihexlp2
00051D                     A   410    $$:
00051D 3E20                A   411    	ld		a,' '
00051F C5                  A   412    	push	bc
000520 D7                  A   413    	rst		10h
000521 D7                  A   414    	rst		10h
000522 C1                  A   415    	pop		bc
000523 18 07               A   416    	jr		ihexlp3
000525                     A   417    ihexlp2:
000525 7E                  A   418    	ld		a,(hl)
                           A   419    
                           A   420    ;	push	hl
000526 C5                  A   421    	push	bc
000527 CD 99 06            A   422    	call	Print_Hex8
00052A C1                  A   423    	pop		bc
                           A   424    ;	pop		hl
00052B 23                  A   425    	inc		hl
00052C                     A   426    ihexlp3:
00052C 0C                  A   427    	inc		c
00052D 79                  A   428    	ld		a,c
00052E E60F                A   429    	and		15
000530 CA 35 05            A   430    	jp		z,ihexend
000533 18 D5               A   431    	jr		ihexlp1
                           A   432    
000535                     A   433    ihexend:
000535 3E20                A   434    	ld		a,' '
000537 D7                  A   435    	rst		10h
000538 C1                  A   436    	pop		bc		;recover c register.
000539                     A   437    iasciiloop:
000539 3E7C                A   438    	ld		a,'|'
00053B C5                  A   439    	push	bc
00053C D7                  A   440    	rst		10h
00053D C1                  A   441    	pop		bc
00053E 21 BF 06            A   442    	ld		hl,buffer
000541 19                  A   443    	add		hl,de
                           A   444    ;	ld		c,0
000542                     A   445    iasciilp1:
000542 78                  A   446    	ld		a,b
000543 B7                  A   447    	or		a
000544 28 09               A   448    	jr		z,iasciilp2
                           A   449    ;	ld		a,b
000546 B9                  A   450    	cp		c
000547 28 02               A   451    	jr		z,$F
000549 30 04               A   452    	jr		nc,iasciilp2
00054B                     A   453    $$:
00054B 3E20                A   454    	ld		a,' '
00054D 18 04               A   455    	jr		iasciilp3
00054F                     A   456    iasciilp2:
00054F 7E                  A   457    	ld		a,(hl)
000550 CD 4C 02            A   458    	call	unprintable
000553                     A   459    iasciilp3:
000553 E5                  A   460    	push	hl
000554 C5                  A   461    	push	bc
000555 D7                  A   462    	rst		10h
000556 C1                  A   463    	pop		bc
000557 E1                  A   464    	pop		hl
000558 23                  A   465    	inc		hl
000559 0C                  A   466    	inc		c
00055A 79                  A   467    	ld		a,c
00055B E60F                A   468    	and		15
00055D 20 E3               A   469    	jr		nz,iasciilp1	;until you get to t
                           A   470    
00055F                     A   471    iasciiend:
00055F CD 56 02            A   472    	call	inline_print
000562 7C0D0A00            A   473    	db		'|',CR,LF,0
000566 5B2A B1 06 0B       A   474    	ld.lil	hl,(rows+BASE)
00056B 5B111000 00         A   475    	ld.lil	de,16
000570 5B19                A   476    	add.lil	hl,de
000572 5B22 B1 06 0B       A   477    	ld.lil	(rows+BASE),hl
000577 7D                  A   478    	ld		a,l
000578 B7                  A   479    	or		a
000579 C2 EE 04            A   480    	jp		nz,iprintlp
00057C C9                  A   481    	ret
                           A   482    
00057D                     A   483    go_down:
00057D 5B2A AD 06 0B       A   484    	ld.lil	hl,(counter+BASE)
000582 5B111000 00         A   485    	ld.lil	de,16
000587 5B19                A   486    	add.lil	hl,de
000589 18 07               A   487    	jr		next_b2
00058B                     A   488    next_byte:
00058B 5B2A AD 06 0B       A   489    	ld.lil	hl,(counter+BASE)
000590 5B23                A   490    	inc.lil	hl
000592                     A   491    next_b2:
000592 1E00                A   492    	ld		e,0
000594 18 0C               A   493    	jr		seekit
000596                     A   494    next_sector:
000596 5B2A AD 06 0B       A   495    	ld.lil	hl,(counter+BASE)
00059B 5B110001 00         A   496    	ld.lil	de,256
0005A0 5B19                A   497    	add.lil	hl,de
0005A2                     A   498    seekit:
0005A2 5B22 AD 06 0B       A   499    	ld.lil	(counter+BASE),hl
0005A7 3A AC 06            A   500    	ld		a,(in_handle)
0005AA 4F                  A   501    	ld		c,a
                           A   502    	MOSCALL	mos_flseek
0005AF C3 91 03            A   503    	jp		main_loop
                           A   504    
0005B2                     A   505    prev_sector:
0005B2 5B2A AD 06 0B       A   506    	ld.lil	hl,(counter+BASE)
0005B7 5B110001 00         A   507    	ld.lil	de,256
0005BC B7                  A   508    	or		a
0005BD 5BED52              A   509    	sbc.lil	hl,de
0005C0 30 E0               A   510    	jr		nc,seekit
0005C2 5B210000 00         A   511    	ld.lil	hl,0
0005C7 18 D9               A   512    	jr		seekit
                           A   513    
0005C9                     A   514    prev_byte:
0005C9 5B2A AD 06 0B       A   515    	ld.lil	hl,(counter+BASE)
0005CE 5B110100 00         A   516    	ld.lil	de,1
0005D3                     A   517    prev_b2:
0005D3 B7                  A   518    	or		a
0005D4 5BED52              A   519    	sbc.lil	hl,de
0005D7 1E00                A   520    	ld		e,0
0005D9 30 C7               A   521    	jr		nc,seekit
0005DB 5B210000 00         A   522    	ld.lil	hl,0
0005E0 18 C0               A   523    	jr		seekit
                           A   524    
0005E2                     A   525    go_up:
0005E2 5B2A AD 06 0B       A   526    	ld.lil	hl,(counter+BASE)
0005E7 5B111000 00         A   527    	ld.lil	de,16
0005EC 18 E5               A   528    	jr		prev_b2
                           A   529    
                           A   530    ;goto routine
0005EE                     A   531    goto:
                           A   532    ;position cursor + prompt
0005EE CD 56 02            A   533    	call	inline_print
0005F1 1F010947 6F20746F   A   534    	db		31,1,9,'Go to [hex]?',0
0005F9 205B6865 785D3F00 
                           A   535    ;0x09: mos_editline - Invoke the line editor
                           A   536    ;HL(U): Address of the buffer
                           A   537    ;BC(U): Buffer length
                           A   538    ;E: 0 to not clear buffer, 1 to clear
                           A   539    ;Returns:
                           A   540    ;A: Key that was used to exit the input loop (C
000601 21 B5 06            A   541    	ld		hl,input_buf
000604 010700              A   542    	ld		bc,7
000607 1E01                A   543    	ld		e,1
                           A   544    	MOSCALL	mos_editline
00060D FE1B                A   545    	cp		27
00060F 28 56               A   546    	jr		z,goto_abort
000611 11 B5 06            A   547    	ld		de,input_buf
000614 5B210000 00         A   548    	ld.lil	hl,0
000619 0606                A   549    	ld		b,6		;max char count
00061B                     A   550    goto_loop:
00061B 1A                  A   551    	ld		a,(de)
00061C B7                  A   552    	or		a
00061D CA A2 05            A   553    	jp		z,seekit
000620 D630                A   554    	sub		'0'	;30h
000622 38 23               A   555    	jr		c,goto_invalid
000624 FE0A                A   556    	cp		9+1
000626 38 12               A   557    	jr		c,goto_nextchar
000628 D610                A   558    	sub		10h
00062A 38 1B               A   559    	jr		c,goto_invalid
00062C E61F                A   560    	and		1fh
00062E 28 17               A   561    	jr		z,goto_invalid
000630 FE07                A   562    	cp		7
000632 30 13               A   563    	jr		nc,goto_invalid
000634 C609                A   564    	add		9
000636 FE10                A   565    	cp		16
000638 30 0D               A   566    	jr		nc,goto_invalid	;fix it later
                           A   567    
00063A                     A   568    goto_nextchar
00063A 5B29                A   569    	add.lil	hl,hl
00063C 5B29                A   570    	add.lil	hl,hl
00063E 5B29                A   571    	add.lil	hl,hl
000640 5B29                A   572    	add.lil	hl,hl
000642 B5                  A   573    	or		l
000643 6F                  A   574    	ld	l,a
000644 13                  A   575    	inc		de
000645 10 D4               A   576    	djnz	goto_loop
                           A   577    
000647                     A   578    goto_invalid:
000647 CD 56 02            A   579    	call	inline_print
00064A 1F010911 89202049   A   580    	db		31,1,9,17,128+8+1,'  Invalid  ',17,
000652 6E76616C 69642020 
00065A 11802020 20202020 
000662 2000 
000664 C3 89 04            A   581    	jp		key_invalid
                           A   582    
000667                     A   583    goto_abort:
000667 CD 56 02            A   584    	call	inline_print
00066A 1F010920 20202020   A   585    	db		31,1,9,'                  ',0
000672 20202020 20202020 
00067A 20202020 2000 
000680 C3 89 04            A   586    	jp		key_invalid
                           A   587    
                           A   588    ;
                           A   589    ; data storage . . .
                           A   590    ;	
000683                     A   591    stringlength:
000683 04                  A   592    	db	4	;default of 4 characters
                           A   593    ; uninitialized storage/BSS but can't use that 
                           A   594    ;
                           A   595    ; RAM
                           A   596    ; 
                           A   597    			DEFINE	LORAM, SPACE = ROM
                           A   598    ;			ORDER	__VECTORS, CODE, LORAM
                           A   599    			SEGMENT LORAM
                           A   600    		
                           A   601    ;			SEGMENT	BSS
                           A   602    ;			SEGMENT CODE
                           A   603    
0006AC                     A   604    in_handle:	DS	1	;Only needs 1 byte handle
0006AD                     A   605    counter:	DS	4	; current address counter f
0006B1                     A   606    rows:		DS	4
0006B5                     A   607    input_buf:	DS	8	;up to 6 characters?
0006BD                     A   608    upcount:	DS	2	;upper 2 bytes for file loc
0006BF                     A   609    buffer:		DS	512	;Space to buffer incoming f
0008BF                     A   610    curbyte:	DS	1	;current byte in the buffer
0008C0                     A   611    keycount:	DS	1	;current key count
                           A   612    	end


Errors: 0
Warnings: 0
Lines Assembled: 962
