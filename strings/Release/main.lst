Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED11-Jun-23     17:34:52     page:   1


PC     Object              I  Line    Source 
                           A     1    ; STRINGS utility
                           A     2    ;
                           A     3    ;
                           A     4    ; Written Agon native by Shawn Sijnstra
                           A     5    ;
                           A     6    ; Notable changes for reference:
                           A     7    ; required colons on all labels
                           A     8    ; labels are case sensitive
                           A     9    ; code is a reserved word and can't be used as 
                           A    10    ; numeric evaluations are done differently - ch
                           A    11    ; reserved word INCLUDE needs to be in upper ca
                           A    12    ; assembly source MUST be .asm, can't use e.g. 
                           A    13    ; supports defb as a synonym for db, but NOT de
                           A    14    ; labels can't start with @
                           A    15    ;
                           A    16    
                           A    17    
                           A    18    			.ASSUME	ADL = 0				
                           A    19    
                           B     0    			INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	Memory Dump - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/11/2022
                           B     5    ; Last Updated:	15/11/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    				
       0000FF00            B     9    RAM_Top:		EQU		0FF00h
       00000000            B    10    Stack_Top:		EQU		00000h	; Stack at top
                           B    11    	
                           B    12    ; For GPIO
                           B    13    ; PA not available on eZ80L92
                           B    14    ;
       00000096            B    15    PA_DR:			EQU		96h
       00000097            B    16    PA_DDR:			EQU		97h
       00000098            B    17    PA_ALT1:		EQU		98h
       00000099            B    18    PA_ALT2:		EQU		99h
       0000009A            B    19    PB_DR:          	EQU		9Ah
       0000009B            B    20    PB_DDR:        	 	EQU		9Bh
       0000009C            B    21    PB_ALT1:        	EQU		9Ch
       0000009D            B    22    PB_ALT2:        	EQU		9Dh
       0000009E            B    23    PC_DR:          	EQU		9Eh
       0000009F            B    24    PC_DDR:         	EQU		9Fh
       000000A0            B    25    PC_ALT1:        	EQU		A0h
       000000A1            B    26    PC_ALT2:        	EQU		A1h
       000000A2            B    27    PD_DR:          	EQU		A2h
       000000A3            B    28    PD_DDR:			EQU		A3h
       000000A4            B    29    PD_ALT1:		EQU		A4h
       000000A5            B    30    PD_ALT2:		EQU		A5h
                           B    31    	
       00000000            B    32    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    33    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    34    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    35    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    36    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    37    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    38    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    39    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    40    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    41    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    42    	
                           B    43    ; For serial.asm
                           B    44    ; 
       016E3600            B    45    BASE_CLOCK		EQU	24000000	; It's actually
                           B    46    
       00000003            B    47    BAUD_500000		EQU	BASE_CLOCK / (16 * 500000)
       00000006            B    48    BAUD_250000		EQU	BASE_CLOCK / (16 * 250000)
       0000000C            B    49    BAUD_125000		EQU	BASE_CLOCK / (16 * 125000)
       0000004E            B    50    BAUD_19200		EQU	BASE_CLOCK / (16 * 19200)	
                           B    51    
                           B    52    ; For interrupts.asm
                           B    53    ;
                           B    54    
                           B    55    ;UARTs
                           B    56    ;
       00000018            B    57    UART0_IVECT		EQU		18h
       0000001A            B    58    UART1_IVECT		EQU		1Ah
                           B    59    
                           B    60    ;Ports
                           B    61    ;
       00000030            B    62    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    63    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    64    PB2_IVECT  	  	EQU   	34h
       00000036            B    65    PB3_IVECT  	  	EQU   	36h
       00000038            B    66    PB4_IVECT    		EQU   	38h
       0000003A            B    67    PB5_IVECT    		EQU   	3Ah
       0000003C            B    68    PB6_IVECT    		EQU   	3Ch
       0000003E            B    69    PB7_IVECT    		EQU   	3Eh
                           B    70                           
       00000040            B    71    PC0_IVECT    		EQU   	40h
       00000042            B    72    PC1_IVECT    		EQU   	42h
       00000044            B    73    PC2_IVECT    		EQU   	44h
       00000046            B    74    PC3_IVECT    		EQU   	46h
       00000048            B    75    PC4_IVECT    		EQU   	48h
       0000004A            B    76    PC5_IVECT    		EQU   	4Ah
       0000004C            B    77    PC6_IVECT    		EQU   	4Ch
       0000004E            B    78    PC7_IVECT    		EQU   	4Eh
                           B    79                           
       00000050            B    80    PD0_IVECT    		EQU   	50h
       00000052            B    81    PD1_IVECT    		EQU   	52h
       00000054            B    82    PD2_IVECT    		EQU   	54h
       00000056            B    83    PD3_IVECT    		EQU   	56h
       00000058            B    84    PD4_IVECT    		EQU   	58h
       0000005A            B    85    PD5_IVECT    		EQU   	5Ah
       0000005C            B    86    PD6_IVECT    		EQU   	5Ch
       0000005E            B    87    PD7_IVECT    		EQU   	5Eh
                           B    88    
                           B    89    ; Originally in main.asm
                           B    90    ;
       0000000D            B    91    CR:			EQU     0DH
       0000000A            B    92    LF:			EQU     0AH
       0000001B            B    93    ESC:			EQU     1BH
                           B     0    			INCLUDE "mos_api.inc"	; In MOS/sr
                           B     1    ;
                           B     2    ; Title:	AGON MOS - API for user projects
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	03/08/2022
                           B     5    ; Last Updated:	15/04/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 05/08/2022:	Added mos_feof
                           B     9    ; 09/08/2022:	Added system variables: cursorX
                           B    10    ; 18/08/2022:	Added system variables: scrchar
                           B    11    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
                           B    12    ; 24/09/2022:	Added mos_getError, mos_mkdir
                           B    13    ; 13/10/2022:	Added mos_oscli
                           B    14    ; 23/02/2023:	Added more sysvars, fixed typo 
                           B    15    ; 04/03/2023:	Added sysvar_scrpixelIndex
                           B    16    ; 08/03/2023:	Renamed sysvar_keycode to sysva
                           B    17    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos
                           B    18    ; 21/03/2023:	Added mos_setintvector, sysvars
                           B    19    ; 22/03/2023:	The VDP commands are now indexe
                           B    20    ; 29/03/2023:	Added mos_uopen, mos_uclose, mo
                           B    21    ; 13/04/2023:	Added FatFS file structures (FF
                           B    22    ; 15/04/2023:	Added mos_getfil, mos_fread, mo
                           B    23    
                           B    24    ; VDP control (VDU 23, 0, n)
                           B    25    ;
       00000080            B    26    vdp_gp:			EQU 	80h
       00000081            B    27    vdp_keycode:		EQU 	81h
       00000082            B    28    vdp_cursor:		EQU	82h
       00000083            B    29    vdp_scrchar:		EQU	83h
       00000084            B    30    vdp_scrpixel:		EQU	84h
       00000085            B    31    vdp_audio:		EQU	85h
       00000086            B    32    vdp_mode:		EQU	86h
       00000087            B    33    vdp_rtc:		EQU	87h
       00000088            B    34    vdp_keystate:		EQU	88h
       000000C0            B    35    vdp_logicalcoords:	EQU	C0h
       000000FF            B    36    vdp_terminalmode:	EQU	FFh
                           B    37    
                           B    38    ; MOS high level functions
                           B    39    ;
       00000000            B    40    mos_getkey:		EQU	00h
       00000001            B    41    mos_load:		EQU	01h
       00000002            B    42    mos_save:		EQU	02h
       00000003            B    43    mos_cd:			EQU	03h
       00000004            B    44    mos_dir:		EQU	04h
       00000005            B    45    mos_del:		EQU	05h
       00000006            B    46    mos_ren:		EQU	06h
       00000007            B    47    mos_mkdir:		EQU	07h
       00000008            B    48    mos_sysvars:		EQU	08h
       00000009            B    49    mos_editline:		EQU	09h
       0000000A            B    50    mos_fopen:		EQU	0Ah
       0000000B            B    51    mos_fclose:		EQU	0Bh
       0000000C            B    52    mos_fgetc:		EQU	0Ch
       0000000D            B    53    mos_fputc:		EQU	0Dh
       0000000E            B    54    mos_feof:		EQU	0Eh
       0000000F            B    55    mos_getError:		EQU	0Fh
       00000010            B    56    mos_oscli:		EQU	10h
       00000011            B    57    mos_copy:		EQU	11h
       00000012            B    58    mos_getrtc:		EQU	12h
       00000013            B    59    mos_setrtc:		EQU	13h
       00000014            B    60    mos_setintvector:	EQU	14h
       00000015            B    61    mos_uopen:		EQU	15h
       00000016            B    62    mos_uclose:		EQU	16h
       00000017            B    63    mos_ugetc:		EQU	17h
       00000018            B    64    mos_uputc:		EQU 	18h
       00000019            B    65    mos_getfil:		EQU	19h
       0000001A            B    66    mos_fread:		EQU	1Ah
       0000001B            B    67    mos_fwrite:		EQU	1Bh
       0000001C            B    68    mos_flseek:		EQU	1Ch
                           B    69    
                           B    70    ; FatFS file access functions
                           B    71    ;
       00000080            B    72    ffs_fopen:		EQU	80h
       00000081            B    73    ffs_fclose:		EQU	81h
       00000082            B    74    ffs_fread:		EQU	82h
       00000083            B    75    ffs_fwrite:		EQU	83h
       00000084            B    76    ffs_flseek:		EQU	84h
       00000085            B    77    ffs_ftruncate:		EQU	85h
       00000086            B    78    ffs_fsync:		EQU	86h
       00000087            B    79    ffs_fforward:		EQU	87h
       00000088            B    80    ffs_fexpand:		EQU	88h
       00000089            B    81    ffs_fgets:		EQU	89h
       0000008A            B    82    ffs_fputc:		EQU	8Ah
       0000008B            B    83    ffs_fputs:		EQU	8Bh
       0000008C            B    84    ffs_fprintf:		EQU	8Ch
       0000008D            B    85    ffs_ftell:		EQU	8Dh
       0000008E            B    86    ffs_feof:		EQU	8Eh
       0000008F            B    87    ffs_fsize:		EQU	8Fh
       00000090            B    88    ffs_ferror:		EQU	90h
                           B    89    
                           B    90    ; FatFS directory access functions
                           B    91    ;
       00000091            B    92    ffs_dopen:		EQU	91h
       00000092            B    93    ffs_dclose:		EQU	92h
       00000093            B    94    ffs_dread:		EQU	93h
       00000094            B    95    ffs_dfindfirst:		EQU	94h
       00000095            B    96    ffs_dfindnext:		EQU	95h
                           B    97    
                           B    98    ; FatFS file and directory management functions
                           B    99    ;
       00000096            B   100    ffs_stat:		EQU	96h
       00000097            B   101    ffs_unlink:		EQU	97h
       00000098            B   102    ffs_rename:		EQU	98h
       00000099            B   103    ffs_chmod:		EQU	99h
       0000009A            B   104    ffs_utime:		EQU	9Ah
       0000009B            B   105    ffs_mkdir:		EQU	9Bh
       0000009C            B   106    ffs_chdir:		EQU	9Ch
       0000009D            B   107    ffs_chdrive:		EQU	9Dh
       0000009E            B   108    ffs_getcwd:		EQU	9Eh
                           B   109    
                           B   110    ; FatFS volume management and system configurat
                           B   111    ;
       0000009F            B   112    ffs_mount:		EQU	9Fh
       000000A0            B   113    ffs_mkfs:		EQU	A0h
       000000A1            B   114    ffs_fdisk		EQU	A1h
       000000A2            B   115    ffs_getfree:		EQU	A2h
       000000A3            B   116    ffs_getlabel:		EQU	A3h
       000000A4            B   117    ffs_setlabel:		EQU	A4h
       000000A5            B   118    ffs_setcp:		EQU	A5h
                           B   119    	
                           B   120    ; File access modes
                           B   121    ;
       00000001            B   122    fa_read:		EQU	01h
       00000002            B   123    fa_write:		EQU	02h
       00000000            B   124    fa_open_existing:	EQU	00h
       00000004            B   125    fa_create_new:		EQU	04h
       00000008            B   126    fa_create_always:	EQU	08h
       00000010            B   127    fa_open_always:		EQU	10h
       00000030            B   128    fa_open_append:		EQU	30h
                           B   129    	
                           B   130    ; System variable indexes for api_sysvars
                           B   131    ; Index into _sysvars in globals.asm
                           B   132    ;
       00000000            B   133    sysvar_time:		EQU	00h	; 4: Clock timer in
       00000004            B   134    sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indic
       00000005            B   135    sysvar_keyascii:	EQU	05h	; 1: ASCII keycode,
       00000006            B   136    sysvar_keymods:		EQU	06h	; 1: Keycode modifi
       00000007            B   137    sysvar_cursorX:		EQU	07h	; 1: Cursor X posit
       00000008            B   138    sysvar_cursorY:		EQU	08h	; 1: Cursor Y posit
       00000009            B   139    sysvar_scrchar:		EQU	09h	; 1: Character read
       0000000A            B   140    sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data rea
       0000000D            B   141    sysvar_audioChannel:	EQU	0Dh	; 1: Audio chan
       0000000E            B   142    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio chan
       0000000F            B   143    sysvar_scrWidth:	EQU	0Fh	; 2: Screen width i
       00000011            B   144    sysvar_scrHeight:	EQU	11h	; 2: Screen height 
       00000013            B   145    sysvar_scrCols:		EQU	13h	; 1: Screen columns
       00000014            B   146    sysvar_scrRows:		EQU	14h	; 1: Screen rows in
       00000015            B   147    sysvar_scrColours:	EQU	15h	; 1: Number of colo
       00000016            B   148    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of p
       00000017            B   149    sysvar_vkeycode:	EQU	17h	; 1: Virtual key co
       00000018            B   150    sysvar_vkeydown		EQU	18h	; 1: Virtual key st
       00000019            B   151    sysvar_vkeycount:	EQU	19h	; 1: Incremented ev
       0000001A            B   152    sysvar_rtc:		EQU	1Ah	; 8: Real time clock da
       00000022            B   153    sysvar_keydelay:	EQU	22h	; 2: Keyboard repea
       00000024            B   154    sysvar_keyrate:		EQU	24h	; 2: Keyboard repea
       00000026            B   155    sysvar_keyled:		EQU	26h	; 1: Keyboard LED s
                           B   156    	
                           B   157    ; Flags for the VPD protocol
                           B   158    ;
       00000001            B   159    vdp_pflag_cursor:	EQU	00000001b
       00000002            B   160    vdp_pflag_scrchar:	EQU	00000010b
       00000004            B   161    vdp_pflag_point:	EQU	00000100b
       00000008            B   162    vdp_pflag_audio:	EQU	00001000b
       00000010            B   163    vdp_pflag_mode:		EQU	00010000b
       00000020            B   164    vdp_pflag_rtc:		EQU	00100000b
                           B   165    
                           B   166    ;
                           B   167    ; FatFS structures
                           B   168    ; These mirror the structures contained in src_
                           B   169    ;
                           B   170    ; Object ID and allocation information (FFOBJID
                           B   171    ;
                           B   172    FFOBJID	.STRUCT
000000                     B   173    	fs:		DS	3	; Pointer to the hosting vo
000003                     B   174    	id:		DS	2	; Hosting volume mount ID
000005                     B   175    	attr:		DS	1	; Object attribute
000006                     B   176    	stat:		DS	1	; Object chain status (
000007                     B   177    	sclust:		DS	4	; Object data start clu
00000B                     B   178    	objsize:	DS	4	; Object size (valid wh
       0000000F            B   179    FFOBJID_SIZE .ENDSTRUCT FFOBJID
                           B   180    ;
                           B   181    ; File object structure (FIL)
                           B   182    ;
                           B   183    FIL .STRUCT
000000                     B   184    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   185    	flag:		DS	1	; File status flags
000010                     B   186    	err:		DS	1	; Abort flag (error cod
000011                     B   187    	fptr:		DS	4	; File read/write point
000015                     B   188    	clust:		DS	4	; Current cluster of fp
000019                     B   189    	sect:		DS	4	; Sector number appeari
00001D                     B   190    	dir_sect:	DS	4	; Sector number contain
000021                     B   191    	dir_ptr:	DS	3	; Pointer to the direct
       00000024            B   192    FIL_SIZE .ENDSTRUCT FIL
                           B   193    ;
                           B   194    ; Directory object structure (DIR)
                           B   195    ; 
                           B   196    DIR .STRUCT
000000                     B   197    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   198    	dptr:		DS	4	; Current read/write of
000013                     B   199    	clust:		DS	4	; Current cluster
000017                     B   200    	sect:		DS	4	; Current sector (0:Rea
00001B                     B   201    	dir:		DS	3	; Pointer to the direct
00001E                     B   202    	fn:		DS	12	; SFN (in/out) {body[8],ext
00002A                     B   203    	blk_ofs:	DS	4	; Offset of current ent
       0000002E            B   204    DIR_SIZE .ENDSTRUCT DIR
                           B   205    ;
                           B   206    ; File information structure (FILINFO)
                           B   207    ;
                           B   208    FILINFO .STRUCT
000000                     B   209    	fsize:		DS 	4	; File size
000004                     B   210    	fdate:		DS	2	; Modified date
000006                     B   211    	ftime:		DS	2	; Modified time
000008                     B   212    	fattrib:	DS	1	; File attribute
000009                     B   213    	altname:	DS	13	; Alternative file name
000016                     B   214    	fname:		DS	256	; Primary file name
       00000116            B   215    FILINFO_SIZE .ENDSTRUCT FILINFO
                           B   216    
                           B   217    ;
                           B   218    ; Macro for calling the API
                           B   219    ; Parameters:
                           B   220    ; - function: One of the function numbers liste
                           B   221    ;
                           B   222    MOSCALL:		MACRO	function
                           B   223    			LD	A, function
                           B   224    			RST.LIS	08h
                           B   225    			ENDMACRO 	
                           B   226    ;
                           A    22    
                           A    23    			SEGMENT CODE
                           A    24    	
                           A    25    			XDEF	_main
                           A    26    
                           A    27    			
                           A    28    ; Error: Invalid parameter
                           A    29    ;
000145 211300              A    30    _err_invalid_param:	LD		HL, 19			; T
000148 C9                  A    31    			RET
                           A    32    
                           A    33    
                           A    34    ; ASCII
                           A    35    ;
       00000003            A    36    CtrlC:	equ	03h
                           A    37    CR:	equ	0Dh
                           A    38    LF:	equ	0Ah
       0000001A            A    39    CtrlZ:	equ	1Ah
                           A    40    ;
                           A    41    
000149                     A    42    _main:
000149 79                  A    43    	ld	a,c	;AGON - number of parameters
00014A 3D                  A    44    	dec	a
00014B CA 59 02            A    45    	jp	z,okusage
00014E FE03                A    46    	cp	3	;too many parameters
000150 D2 5F 02            A    47    	jp	nc,badusage
                           A    48    
000153 5BDD2703            A    49    	LD.LIL		HL,(IX+3)		; HLU: pointer 
000157 5B7E                A    50    	LD.LIL	a,(HL)				;24 bit
000159 FE2D                A    51    	cp	'-'
00015B 20 3D               A    52    	jr	nz,openit
00015D 5B23                A    53    	INC.LIL	HL
00015F 5B7E                A    54    	LD.LIL	a,(HL)				;24 bit
000161 FE6E                A    55    	cp	'n'
000163 C2 5F 02            A    56    	jp	nz,badusage	
000166 5B23                A    57    	INC.LIL	HL
000168 5B7E                A    58    	LD.LIL	a,(HL)				;24 bit
00016A FE31                A    59    	cp	'1'
00016C DA 5F 02            A    60    	jp	c,badusage
00016F FE3A                A    61    	cp	'9'+1
000171 D2 5F 02            A    62    	jp	nc,badusage
000174 D630                A    63    	sub	'0'
000176 5F                  A    64    	ld	e,a
000177 32 8A 03            A    65    	ld	(stringlength),a
00017A 5B23                A    66    	INC.LIL	HL
00017C 5B7E                A    67    	LD.LIL	a,(HL)				;24 bit
00017E FE21                A    68    	cp	' '+1
000180 38 14               A    69    	jr	c,lengthdone
000182 FE30                A    70    	cp	'0'
000184 DA 5F 02            A    71    	jp	c,badusage
000187 FE3A                A    72    	cp	'9'+1
000189 D2 5F 02            A    73    	jp	nc,badusage
00018C D630                A    74    	sub	'0'
00018E 160A                A    75    	ld	d,10
000190 ED5C                A    76    	mlt	de
000192 83                  A    77    	add	a,e
000193 32 8A 03            A    78    	ld	(stringlength),a
000196                     A    79    lengthdone:
                           A    80    
000196 5BDD2706            A    81    	LD.LIL		HL,(IX+6)		; HLU: pointer 
00019A                     A    82    openit:
00019A 0E01                A    83    	ld	c,fa_read	;open read-only
00019C 5BDDE5              A    84    	push.lil	ix
                           A    85    	MOSCALL	mos_fopen
0001A3 5BDDE1              A    86    	pop.lil		ix
0001A6 B7                  A    87    	or	a
0001A7 20 0E               A    88    	jr	nz,open_ok
                           A    89    ;	call	inline_print
                           A    90    ;	db	"File not found.",CR,LF,0
                           A    91    ;	jr	exit
0001A9 210400              A    92    	ld	hl,4	;file not found/could not find 
0001AC C9                  A    93    	ret			;exit
                           A    94    ;
                           A    95    ;
                           A    96    ; Close and exit routines
                           A    97    ;
                           A    98    
0001AD                     A    99    close:
                           A   100    ;C: Filehandle, or 0 to close all open files
                           A   101    ;returns number of still open files - how about
                           A   102    
0001AD 0E00                A   103    	ld	c,0
                           A   104    	MOSCALL	mos_fclose	
                           A   105    
0001B3                     A   106    exit:
0001B3 210000              A   107    	ld	hl,0	;for Agon - successful exit
0001B6 C9                  A   108    	ret
                           A   109    ;
                           A   110    ;
0001B7                     A   111    open_ok:
                           A   112    
0001B7 32 8B 03            A   113    	ld	(in_handle),a	;store the file handle 
                           A   114    	MOSCALL	mos_sysvars	;get the sysvars locati
0001BE DD7E19              A   115    	ld	a,(IX+sysvar_vkeycount)	;fetch keycount
0001C1 32 F1 03            A   116    	ld	(keycount),a	;store to compare again
0001C4                     A   117    stringlp:
0001C4 CD 2A 02            A   118    	call	getbyte
0001C7 CD 15 02            A   119    	call	unprintable
0001CA 28 39               A   120    	jr		z,noprint
                           A   121    ;store character and check next is also printab
0001CC 11 8C 03            A   122    	ld		de,buffer
0001CF 12                  A   123    	ld		(de),a
0001D0 0601                A   124    	ld		b,1			;lets see if we can kee
0001D2                     A   125    innerlp:
0001D2 3A 8A 03            A   126    	ld		a,(stringlength)
0001D5 B8                  A   127    	cp		b
0001D6 28 14               A   128    	jr		z,printbuff	
                           A   129    	MOSCALL mos_feof	;check for end of file
0001DC B7                  A   130    	or		a
0001DD 20 2D               A   131    	jr		nz,donefile
0001DF CD 2A 02            A   132    	call	getbyte		;fetch next byte
0001E2 CD 15 02            A   133    	call	unprintable
0001E5 28 1E               A   134    	jr		z,noprint	;if unprintable, don't 
0001E7 13                  A   135    	inc		de
0001E8 12                  A   136    	ld		(de),a
0001E9 04                  A   137    	inc		b
0001EA 18 E6               A   138    	jr		innerlp
                           A   139    
                           A   140    
0001EC                     A   141    printbuff:
                           A   142    ;	push	bc		;preserve length
0001EC 11 8C 03            A   143    	ld		de,buffer
0001EF                     A   144    $$:
0001EF 1A                  A   145    	ld		a,(de)	
0001F0 D7                  A   146    	rst		10h
0001F1 13                  A   147    	inc		de
0001F2 10 FB               A   148    	djnz	$b
                           A   149    ;	pop		bc
                           A   150    ;now keep printing until unprintable again
0001F4                     A   151    allgood_lp
0001F4 CD 2A 02            A   152    	call	getbyte
0001F7 CD 15 02            A   153    	call	unprintable
0001FA 28 03               A   154    	jr		z,endstring
0001FC D7                  A   155    	rst		10h
0001FD 18 F5               A   156    	jr		allgood_lp	
0001FF                     A   157    endstring:
0001FF CD 1E 02            A   158    	call	inline_print
000202 0D0A00              A   159    	db		CR,LF,0		;newline at end - TEST
000205                     A   160    noprint:
                           A   161    	MOSCALL mos_feof	;check for end of file
000209 B7                  A   162    	or		a
00020A 28 B8               A   163    	jr		z,stringlp
00020C                     A   164    donefile:
00020C CD 1E 02            A   165    	call	inline_print
00020F 0D0A00              A   166    	db		CR,LF,0
000212 C3 AD 01            A   167    	jp		close
                           A   168    
                           A   169    
                           A   170    ; Entry:
                           A   171    ; A is a character to test
                           A   172    ; Exit:
                           A   173    ; Z flag is unprintable
000215                     A   174    unprintable:
000215 FE20                A   175    	cp	' '
000217 38 03               A   176    	jr	c,$f
000219 FE7F                A   177    	cp	127
00021B D8                  A   178    	ret	c	;always nz
00021C AF                  A   179    $$:	xor	a	;sets 0 flag
00021D C9                  A   180    	ret
                           A   181    ;
                           A   182    ; Prints string directly after the call
                           A   183    ;
00021E E1                  A   184    inline_print:	pop	hl
00021F CD 25 02            A   185    	call	print_string
000222 E9                  A   186    	jp	(hl)
                           A   187    ;
                           A   188    ; more efficient print string for strings > 1 c
000223                     A   189    $$:
000223 D7                  A   190    	rst	10h	;Agon uses this to print the charac
000224 23                  A   191    	inc	hl
000225 7E                  A   192    print_string:	ld	a,(hl)
000226 B7                  A   193    	or	a
000227 20 FA               A   194    	jr	nz,$b
000229 C9                  A   195    	ret
                           A   196    ;
                           A   197    ;
00022A                     A   198    getbyte:
00022A CD 36 02            A   199    	call	ck_ctrlC
00022D 3A 8B 03            A   200    	ld	a,(in_handle)
000230 4F                  A   201    	ld	c,a
                           A   202    	MOSCALL mos_fgetc	;carry flag on last byt
000235 C9                  A   203    	ret
                           A   204    
                           A   205    ; Check for ctrl-C. If so, clean stack and exit
                           A   206    ;
000236                     A   207    ck_ctrlC:
000236 3E01                A   208    	ld	a,1		; modified below by self modify
000238 3D                  A   209    	dec	a
000239 E60F                A   210    	and	15
00023B 32 37 02            A   211    	ld	(ck_ctrlC+1),a	; update LD A instructi
00023E C0                  A   212    	ret	nz		; check every 16 calls only
                           A   213    	MOSCALL	mos_sysvars	;get the sysvars locati
000243 5BDD7E19            A   214    	ld.lil	a,(IX+sysvar_vkeycount)	;check if a
000247 21 F1 03            A   215    	ld	hl,keycount
00024A BE                  A   216    	cp	(hl)	;compare against keycount for c
00024B C8                  A   217    	ret	z
00024C 77                  A   218    	ld	(hl),a	;update keycount
00024D 5BDD7E05            A   219    	ld.lil	a,(IX+sysvar_keyascii)	;fetch char
000251 FE03                A   220    	cp	3	;is it ctr-C
000253 C0                  A   221    	ret	nz
000254 E1                  A   222    	pop	hl		;clean up stack
000255 E1                  A   223    	pop	hl
000256 C3 AD 01            A   224    	jp	close
                           A   225    
000259 CD 65 02            A   226    okusage:	call usage
00025C C3 B3 01            A   227    	jp	exit
                           A   228    
00025F CD 65 02            A   229    badusage:	call usage
000262 C3 45 01            A   230    	jp	_err_invalid_param
                           A   231    ;
                           A   232    ; usage -- show syntax
                           A   233    ; 
000265 CD 1E 02            A   234    usage:	call	inline_print
000268 0D0A7374 72696E67   A   235    	db	CR,LF,'strings utility for Agon by Shaw
000270 73207574 696C6974 
000278 7920666F 72204167 
000280 6F6E2062 79205368 
000288 61776E20 53696A6E 
000290 73747261 2031312D 
000298 4A756E2D 32303233 
0002A0 0D0A0D0A 
0002A4 55736167 653A0D0A   A   236    	db	'Usage:',CR,LF
0002AC 20202073 7472696E   A   237    	db	'   strings [-nX] <file>',CR,LF,CR,LF
0002B4 6773205B 2D6E585D 
0002BC 203C6669 6C653E0D 
0002C4 0A0D0A 
0002C7 4F707469 6F6E616C   A   238    	db	'Optional parameter n for minimum strin
0002CF 20706172 616D6574 
0002D7 6572206E 20666F72 
0002DF 206D696E 696D756D 
0002E7 20737472 696E6720 
0002EF 6C656E67 74682058 
0002F7 203D2031 20757020 
0002FF 746F2039 390D0A 
000306 20446566 61756C74   A   239    	db  ' Default string length 4 (equivalent t
00030E 20737472 696E6720 
000316 6C656E67 74682034 
00031E 20286571 75697661 
000326 6C656E74 20746F20 
00032E 2D6E3429 2E204374 
000336 726C2D43 20746F20 
00033E 61626F72 742E0D0A 
000346 53746F72 65207374   A   240    	db 	'Store strings.bin in /mos directory. M
00034E 72696E67 732E6269 
000356 6E20696E 202F6D6F 
00035E 73206469 72656374 
000366 6F72792E 204D696E 
00036E 696D756D 204D4F53 
000376 20766572 73696F6E 
00037E 20312E30 332E0D0A 
000386 0D0A00 
000389 C9                  A   241    	ret
                           A   242    
                           A   243    ;
                           A   244    ; data storage . . .
                           A   245    ;	
00038A                     A   246    stringlength:
00038A 04                  A   247    	db	4	;default of 4 characters
                           A   248    ; uninitialized storage/BSS but can't use that 
                           A   249    ;
                           A   250    ; RAM
                           A   251    ; 
                           A   252    			DEFINE	LORAM, SPACE = ROM
                           A   253    ;			ORDER	__VECTORS, CODE, LORAM
                           A   254    			SEGMENT LORAM
                           A   255    		
                           A   256    ;			SEGMENT	BSS
                           A   257    ;			SEGMENT CODE
                           A   258    
00038B                     A   259    in_handle:	DS	1	;Only needs 1 byte handle
00038C                     A   260    buffer:		DS	100	;Space to buffer incoming s
0003F0                     A   261    curbyte:	DS	1	;current byte in the buffer
0003F1                     A   262    keycount:	DS	1	;current key count
                           A   263    	end


Errors: 0
Warnings: 0
Lines Assembled: 604
