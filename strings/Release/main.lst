Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED23-May-23     23:10:10     page:   1


PC     Object              I  Line    Source 
                           A     1    ; STRINGS utility
                           A     2    ;
                           A     3    ;
                           A     4    ; Written Agon native by Shawn Sijnstra
                           A     5    ;
                           A     6    ; Notable changes for reference:
                           A     7    ; required colons on all labels
                           A     8    ; labels are case sensitive
                           A     9    ; code is a reserved word and can't be used as 
                           A    10    ; numeric evaluations are done differently - ch
                           A    11    ;
                           A    12    
                           A    13    
                           A    14    			.ASSUME	ADL = 0				
                           A    15    
                           B     0    			INCLUDE	"equs.inc"
                           B     1    ;
                           B     2    ; Title:	Memory Dump - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/11/2022
                           B     5    ; Last Updated:	15/11/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    				
       0000FF00            B     9    RAM_Top:		EQU		0FF00h
       00000000            B    10    Stack_Top:		EQU		00000h	; Stack at top
                           B    11    	
                           B    12    ; For GPIO
                           B    13    ; PA not available on eZ80L92
                           B    14    ;
       00000096            B    15    PA_DR:			EQU		96h
       00000097            B    16    PA_DDR:			EQU		97h
       00000098            B    17    PA_ALT1:		EQU		98h
       00000099            B    18    PA_ALT2:		EQU		99h
       0000009A            B    19    PB_DR:          	EQU		9Ah
       0000009B            B    20    PB_DDR:        	 	EQU		9Bh
       0000009C            B    21    PB_ALT1:        	EQU		9Ch
       0000009D            B    22    PB_ALT2:        	EQU		9Dh
       0000009E            B    23    PC_DR:          	EQU		9Eh
       0000009F            B    24    PC_DDR:         	EQU		9Fh
       000000A0            B    25    PC_ALT1:        	EQU		A0h
       000000A1            B    26    PC_ALT2:        	EQU		A1h
       000000A2            B    27    PD_DR:          	EQU		A2h
       000000A3            B    28    PD_DDR:			EQU		A3h
       000000A4            B    29    PD_ALT1:		EQU		A4h
       000000A5            B    30    PD_ALT2:		EQU		A5h
                           B    31    	
       00000000            B    32    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    33    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    34    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    35    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    36    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    37    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    38    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    39    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    40    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    41    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    42    	
                           B    43    ; For serial.asm
                           B    44    ; 
       016E3600            B    45    BASE_CLOCK		EQU	24000000	; It's actually
                           B    46    
       00000003            B    47    BAUD_500000		EQU	BASE_CLOCK / (16 * 500000)
       00000006            B    48    BAUD_250000		EQU	BASE_CLOCK / (16 * 250000)
       0000000C            B    49    BAUD_125000		EQU	BASE_CLOCK / (16 * 125000)
       0000004E            B    50    BAUD_19200		EQU	BASE_CLOCK / (16 * 19200)	
                           B    51    
                           B    52    ; For interrupts.asm
                           B    53    ;
                           B    54    
                           B    55    ;UARTs
                           B    56    ;
       00000018            B    57    UART0_IVECT		EQU		18h
       0000001A            B    58    UART1_IVECT		EQU		1Ah
                           B    59    
                           B    60    ;Ports
                           B    61    ;
       00000030            B    62    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    63    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    64    PB2_IVECT  	  	EQU   	34h
       00000036            B    65    PB3_IVECT  	  	EQU   	36h
       00000038            B    66    PB4_IVECT    		EQU   	38h
       0000003A            B    67    PB5_IVECT    		EQU   	3Ah
       0000003C            B    68    PB6_IVECT    		EQU   	3Ch
       0000003E            B    69    PB7_IVECT    		EQU   	3Eh
                           B    70                           
       00000040            B    71    PC0_IVECT    		EQU   	40h
       00000042            B    72    PC1_IVECT    		EQU   	42h
       00000044            B    73    PC2_IVECT    		EQU   	44h
       00000046            B    74    PC3_IVECT    		EQU   	46h
       00000048            B    75    PC4_IVECT    		EQU   	48h
       0000004A            B    76    PC5_IVECT    		EQU   	4Ah
       0000004C            B    77    PC6_IVECT    		EQU   	4Ch
       0000004E            B    78    PC7_IVECT    		EQU   	4Eh
                           B    79                           
       00000050            B    80    PD0_IVECT    		EQU   	50h
       00000052            B    81    PD1_IVECT    		EQU   	52h
       00000054            B    82    PD2_IVECT    		EQU   	54h
       00000056            B    83    PD3_IVECT    		EQU   	56h
       00000058            B    84    PD4_IVECT    		EQU   	58h
       0000005A            B    85    PD5_IVECT    		EQU   	5Ah
       0000005C            B    86    PD6_IVECT    		EQU   	5Ch
       0000005E            B    87    PD7_IVECT    		EQU   	5Eh
                           B    88    
                           B    89    ; Originally in main.asm
                           B    90    ;
       0000000D            B    91    CR:			EQU     0DH
       0000000A            B    92    LF:			EQU     0AH
       0000001B            B    93    ESC:			EQU     1BH
                           B     0    			INCLUDE "mos_api.inc"	; In MOS/sr
                           B     1    ;
                           B     2    ; Title:	AGON MOS - API for user projects
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	03/08/2022
                           B     5    ; Last Updated:	15/04/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 05/08/2022:	Added mos_feof
                           B     9    ; 09/08/2022:	Added system variables: cursorX
                           B    10    ; 18/08/2022:	Added system variables: scrchar
                           B    11    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
                           B    12    ; 24/09/2022:	Added mos_getError, mos_mkdir
                           B    13    ; 13/10/2022:	Added mos_oscli
                           B    14    ; 23/02/2023:	Added more sysvars, fixed typo 
                           B    15    ; 04/03/2023:	Added sysvar_scrpixelIndex
                           B    16    ; 08/03/2023:	Renamed sysvar_keycode to sysva
                           B    17    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos
                           B    18    ; 21/03/2023:	Added mos_setintvector, sysvars
                           B    19    ; 22/03/2023:	The VDP commands are now indexe
                           B    20    ; 29/03/2023:	Added mos_uopen, mos_uclose, mo
                           B    21    ; 13/04/2023:	Added FatFS file structures (FF
                           B    22    ; 15/04/2023:	Added mos_getfil, mos_fread, mo
                           B    23    
                           B    24    ; VDP control (VDU 23, 0, n)
                           B    25    ;
       00000080            B    26    vdp_gp:			EQU 	80h
       00000081            B    27    vdp_keycode:		EQU 	81h
       00000082            B    28    vdp_cursor:		EQU	82h
       00000083            B    29    vdp_scrchar:		EQU	83h
       00000084            B    30    vdp_scrpixel:		EQU	84h
       00000085            B    31    vdp_audio:		EQU	85h
       00000086            B    32    vdp_mode:		EQU	86h
       00000087            B    33    vdp_rtc:		EQU	87h
       00000088            B    34    vdp_keystate:		EQU	88h
       000000C0            B    35    vdp_logicalcoords:	EQU	C0h
       000000FF            B    36    vdp_terminalmode:	EQU	FFh
                           B    37    
                           B    38    ; MOS high level functions
                           B    39    ;
       00000000            B    40    mos_getkey:		EQU	00h
       00000001            B    41    mos_load:		EQU	01h
       00000002            B    42    mos_save:		EQU	02h
       00000003            B    43    mos_cd:			EQU	03h
       00000004            B    44    mos_dir:		EQU	04h
       00000005            B    45    mos_del:		EQU	05h
       00000006            B    46    mos_ren:		EQU	06h
       00000007            B    47    mos_mkdir:		EQU	07h
       00000008            B    48    mos_sysvars:		EQU	08h
       00000009            B    49    mos_editline:		EQU	09h
       0000000A            B    50    mos_fopen:		EQU	0Ah
       0000000B            B    51    mos_fclose:		EQU	0Bh
       0000000C            B    52    mos_fgetc:		EQU	0Ch
       0000000D            B    53    mos_fputc:		EQU	0Dh
       0000000E            B    54    mos_feof:		EQU	0Eh
       0000000F            B    55    mos_getError:		EQU	0Fh
       00000010            B    56    mos_oscli:		EQU	10h
       00000011            B    57    mos_copy:		EQU	11h
       00000012            B    58    mos_getrtc:		EQU	12h
       00000013            B    59    mos_setrtc:		EQU	13h
       00000014            B    60    mos_setintvector:	EQU	14h
       00000015            B    61    mos_uopen:		EQU	15h
       00000016            B    62    mos_uclose:		EQU	16h
       00000017            B    63    mos_ugetc:		EQU	17h
       00000018            B    64    mos_uputc:		EQU 	18h
       00000019            B    65    mos_getfil:		EQU	19h
       0000001A            B    66    mos_fread:		EQU	1Ah
       0000001B            B    67    mos_fwrite:		EQU	1Bh
       0000001C            B    68    mos_flseek:		EQU	1Ch
                           B    69    
                           B    70    ; FatFS file access functions
                           B    71    ;
       00000080            B    72    ffs_fopen:		EQU	80h
       00000081            B    73    ffs_fclose:		EQU	81h
       00000082            B    74    ffs_fread:		EQU	82h
       00000083            B    75    ffs_fwrite:		EQU	83h
       00000084            B    76    ffs_flseek:		EQU	84h
       00000085            B    77    ffs_ftruncate:		EQU	85h
       00000086            B    78    ffs_fsync:		EQU	86h
       00000087            B    79    ffs_fforward:		EQU	87h
       00000088            B    80    ffs_fexpand:		EQU	88h
       00000089            B    81    ffs_fgets:		EQU	89h
       0000008A            B    82    ffs_fputc:		EQU	8Ah
       0000008B            B    83    ffs_fputs:		EQU	8Bh
       0000008C            B    84    ffs_fprintf:		EQU	8Ch
       0000008D            B    85    ffs_ftell:		EQU	8Dh
       0000008E            B    86    ffs_feof:		EQU	8Eh
       0000008F            B    87    ffs_fsize:		EQU	8Fh
       00000090            B    88    ffs_ferror:		EQU	90h
                           B    89    
                           B    90    ; FatFS directory access functions
                           B    91    ;
       00000091            B    92    ffs_dopen:		EQU	91h
       00000092            B    93    ffs_dclose:		EQU	92h
       00000093            B    94    ffs_dread:		EQU	93h
       00000094            B    95    ffs_dfindfirst:		EQU	94h
       00000095            B    96    ffs_dfindnext:		EQU	95h
                           B    97    
                           B    98    ; FatFS file and directory management functions
                           B    99    ;
       00000096            B   100    ffs_stat:		EQU	96h
       00000097            B   101    ffs_unlink:		EQU	97h
       00000098            B   102    ffs_rename:		EQU	98h
       00000099            B   103    ffs_chmod:		EQU	99h
       0000009A            B   104    ffs_utime:		EQU	9Ah
       0000009B            B   105    ffs_mkdir:		EQU	9Bh
       0000009C            B   106    ffs_chdir:		EQU	9Ch
       0000009D            B   107    ffs_chdrive:		EQU	9Dh
       0000009E            B   108    ffs_getcwd:		EQU	9Eh
                           B   109    
                           B   110    ; FatFS volume management and system configurat
                           B   111    ;
       0000009F            B   112    ffs_mount:		EQU	9Fh
       000000A0            B   113    ffs_mkfs:		EQU	A0h
       000000A1            B   114    ffs_fdisk		EQU	A1h
       000000A2            B   115    ffs_getfree:		EQU	A2h
       000000A3            B   116    ffs_getlabel:		EQU	A3h
       000000A4            B   117    ffs_setlabel:		EQU	A4h
       000000A5            B   118    ffs_setcp:		EQU	A5h
                           B   119    	
                           B   120    ; File access modes
                           B   121    ;
       00000001            B   122    fa_read:		EQU	01h
       00000002            B   123    fa_write:		EQU	02h
       00000000            B   124    fa_open_existing:	EQU	00h
       00000004            B   125    fa_create_new:		EQU	04h
       00000008            B   126    fa_create_always:	EQU	08h
       00000010            B   127    fa_open_always:		EQU	10h
       00000030            B   128    fa_open_append:		EQU	30h
                           B   129    	
                           B   130    ; System variable indexes for api_sysvars
                           B   131    ; Index into _sysvars in globals.asm
                           B   132    ;
       00000000            B   133    sysvar_time:		EQU	00h	; 4: Clock timer in
       00000004            B   134    sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indic
       00000005            B   135    sysvar_keyascii:	EQU	05h	; 1: ASCII keycode,
       00000006            B   136    sysvar_keymods:		EQU	06h	; 1: Keycode modifi
       00000007            B   137    sysvar_cursorX:		EQU	07h	; 1: Cursor X posit
       00000008            B   138    sysvar_cursorY:		EQU	08h	; 1: Cursor Y posit
       00000009            B   139    sysvar_scrchar:		EQU	09h	; 1: Character read
       0000000A            B   140    sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data rea
       0000000D            B   141    sysvar_audioChannel:	EQU	0Dh	; 1: Audio chan
       0000000E            B   142    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio chan
       0000000F            B   143    sysvar_scrWidth:	EQU	0Fh	; 2: Screen width i
       00000011            B   144    sysvar_scrHeight:	EQU	11h	; 2: Screen height 
       00000013            B   145    sysvar_scrCols:		EQU	13h	; 1: Screen columns
       00000014            B   146    sysvar_scrRows:		EQU	14h	; 1: Screen rows in
       00000015            B   147    sysvar_scrColours:	EQU	15h	; 1: Number of colo
       00000016            B   148    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of p
       00000017            B   149    sysvar_vkeycode:	EQU	17h	; 1: Virtual key co
       00000018            B   150    sysvar_vkeydown		EQU	18h	; 1: Virtual key st
       00000019            B   151    sysvar_vkeycount:	EQU	19h	; 1: Incremented ev
       0000001A            B   152    sysvar_rtc:		EQU	1Ah	; 8: Real time clock da
       00000022            B   153    sysvar_keydelay:	EQU	22h	; 2: Keyboard repea
       00000024            B   154    sysvar_keyrate:		EQU	24h	; 2: Keyboard repea
       00000026            B   155    sysvar_keyled:		EQU	26h	; 1: Keyboard LED s
                           B   156    	
                           B   157    ; Flags for the VPD protocol
                           B   158    ;
       00000001            B   159    vdp_pflag_cursor:	EQU	00000001b
       00000002            B   160    vdp_pflag_scrchar:	EQU	00000010b
       00000004            B   161    vdp_pflag_point:	EQU	00000100b
       00000008            B   162    vdp_pflag_audio:	EQU	00001000b
       00000010            B   163    vdp_pflag_mode:		EQU	00010000b
       00000020            B   164    vdp_pflag_rtc:		EQU	00100000b
                           B   165    
                           B   166    ;
                           B   167    ; FatFS structures
                           B   168    ; These mirror the structures contained in src_
                           B   169    ;
                           B   170    ; Object ID and allocation information (FFOBJID
                           B   171    ;
                           B   172    FFOBJID	.STRUCT
000000                     B   173    	fs:		DS	3	; Pointer to the hosting vo
000003                     B   174    	id:		DS	2	; Hosting volume mount ID
000005                     B   175    	attr:		DS	1	; Object attribute
000006                     B   176    	stat:		DS	1	; Object chain status (
000007                     B   177    	sclust:		DS	4	; Object data start clu
00000B                     B   178    	objsize:	DS	4	; Object size (valid wh
       0000000F            B   179    FFOBJID_SIZE .ENDSTRUCT FFOBJID
                           B   180    ;
                           B   181    ; File object structure (FIL)
                           B   182    ;
                           B   183    FIL .STRUCT
000000                     B   184    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   185    	flag:		DS	1	; File status flags
000010                     B   186    	err:		DS	1	; Abort flag (error cod
000011                     B   187    	fptr:		DS	4	; File read/write point
000015                     B   188    	clust:		DS	4	; Current cluster of fp
000019                     B   189    	sect:		DS	4	; Sector number appeari
00001D                     B   190    	dir_sect:	DS	4	; Sector number contain
000021                     B   191    	dir_ptr:	DS	3	; Pointer to the direct
       00000024            B   192    FIL_SIZE .ENDSTRUCT FIL
                           B   193    ;
                           B   194    ; Directory object structure (DIR)
                           B   195    ; 
                           B   196    DIR .STRUCT
000000                     B   197    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   198    	dptr:		DS	4	; Current read/write of
000013                     B   199    	clust:		DS	4	; Current cluster
000017                     B   200    	sect:		DS	4	; Current sector (0:Rea
00001B                     B   201    	dir:		DS	3	; Pointer to the direct
00001E                     B   202    	fn:		DS	12	; SFN (in/out) {body[8],ext
00002A                     B   203    	blk_ofs:	DS	4	; Offset of current ent
       0000002E            B   204    DIR_SIZE .ENDSTRUCT DIR
                           B   205    ;
                           B   206    ; File information structure (FILINFO)
                           B   207    ;
                           B   208    FILINFO .STRUCT
000000                     B   209    	fsize:		DS 	4	; File size
000004                     B   210    	fdate:		DS	2	; Modified date
000006                     B   211    	ftime:		DS	2	; Modified time
000008                     B   212    	fattrib:	DS	1	; File attribute
000009                     B   213    	altname:	DS	13	; Alternative file name
000016                     B   214    	fname:		DS	256	; Primary file name
       00000116            B   215    FILINFO_SIZE .ENDSTRUCT FILINFO
                           B   216    
                           B   217    ;
                           B   218    ; Macro for calling the API
                           B   219    ; Parameters:
                           B   220    ; - function: One of the function numbers liste
                           B   221    ;
                           B   222    MOSCALL:		MACRO	function
                           B   223    			LD	A, function
                           B   224    			RST.LIS	08h
                           B   225    			ENDMACRO 	
                           A    18    
                           A    19    			SEGMENT CODE
                           A    20    	
                           A    21    			XDEF	_main
                           A    22    
                           A    23    			
                           A    24    ; Error: Invalid parameter
                           A    25    ;
000144 211300              A    26    _err_invalid_param:	LD		HL, 19			; T
000147 C9                  A    27    			RET
                           A    28    
                           A    29    
                           A    30    ; ASCII
                           A    31    ;
       00000003            A    32    CtrlC:	equ	03h
                           A    33    CR:	equ	0Dh
                           A    34    LF:	equ	0Ah
       0000001A            A    35    CtrlZ:	equ	1Ah
                           A    36    ;
                           A    37    
000148                     A    38    _main:
000148 79                  A    39    	ld	a,c	;AGON - number of parameters
000149 3D                  A    40    	dec	a
00014A CA 3B 02            A    41    	jp	z,okusage
00014D FE03                A    42    	cp	3	;too many parameters
00014F D2 41 02            A    43    	jp	nc,badusage
                           A    44    
000152 5BDD2703            A    45    	LD.LIL		HL,(IX+3)		; HLU: pointer 
000156 5B7E                A    46    	LD.LIL	a,(HL)				;24 bit
000158 FE2D                A    47    	cp	'-'
00015A 20 20               A    48    	jr	nz,openit
00015C 5B23                A    49    	INC.LIL	HL
00015E 5B7E                A    50    	LD.LIL	a,(HL)				;24 bit
000160 FE6E                A    51    	cp	'n'
000162 C2 41 02            A    52    	jp	nz,badusage	
000165 5B23                A    53    	INC.LIL	HL
000167 5B7E                A    54    	LD.LIL	a,(HL)				;24 bit
000169 FE31                A    55    	cp	'1'
00016B DA 41 02            A    56    	jp	c,badusage
00016E FE3A                A    57    	cp	'9'+1
000170 D2 41 02            A    58    	jp	nc,badusage
000173 D630                A    59    	sub	'0'
000175 32 48 03            A    60    	ld	(stringlength),a
000178 5BDD2706            A    61    	LD.LIL		HL,(IX+6)		; HLU: pointer 
00017C                     A    62    openit:
00017C 0E01                A    63    	ld	c,fa_read	;open read-only
00017E 5BDDE5              A    64    	push.lil	ix
                           A    65    	MOSCALL	mos_fopen
000185 5BDDE1              A    66    	pop.lil		ix
000188 B7                  A    67    	or	a
000189 20 0E               A    68    	jr	nz,open_ok
                           A    69    ;	call	inline_print
                           A    70    ;	db	"File not found.",CR,LF,0
                           A    71    ;	jr	exit
00018B 210400              A    72    	ld	hl,4	;file not found/could not find 
00018E C9                  A    73    	ret			;exit
                           A    74    ;
                           A    75    ;
                           A    76    ; Close and exit routines
                           A    77    ;
                           A    78    
00018F                     A    79    close:
                           A    80    ;C: Filehandle, or 0 to close all open files
                           A    81    ;returns number of still open files - how about
                           A    82    
00018F 0E00                A    83    	ld	c,0
                           A    84    	MOSCALL	mos_fclose	
                           A    85    
000195                     A    86    exit:
000195 210000              A    87    	ld	hl,0	;for Agon - successful exit
000198 C9                  A    88    	ret
                           A    89    ;
                           A    90    ;
000199                     A    91    open_ok:
                           A    92    
000199 32 49 03            A    93    	ld	(in_handle),a	;store the file handle 
                           A    94    	MOSCALL	mos_sysvars	;get the sysvars locati
0001A0 DD7E19              A    95    	ld	a,(IX+sysvar_vkeycount)	;fetch keycount
0001A3 32 55 03            A    96    	ld	(keycount),a	;store to compare again
0001A6                     A    97    stringlp:
0001A6 CD 0C 02            A    98    	call	getbyte
0001A9 CD F7 01            A    99    	call	unprintable
0001AC 28 39               A   100    	jr		z,noprint
                           A   101    ;store character and check next is also printab
0001AE 11 4A 03            A   102    	ld		de,buffer
0001B1 12                  A   103    	ld		(de),a
0001B2 0601                A   104    	ld		b,1			;lets see if we can kee
0001B4                     A   105    innerlp:
0001B4 3A 48 03            A   106    	ld		a,(stringlength)
0001B7 B8                  A   107    	cp		b
0001B8 28 14               A   108    	jr		z,printbuff	
                           A   109    	MOSCALL mos_feof	;check for end of file
0001BE B7                  A   110    	or		a
0001BF 20 2D               A   111    	jr		nz,donefile
0001C1 CD 0C 02            A   112    	call	getbyte		;fetch next byte
0001C4 CD F7 01            A   113    	call	unprintable
0001C7 28 1E               A   114    	jr		z,noprint	;if unprintable, don't 
0001C9 13                  A   115    	inc		de
0001CA 12                  A   116    	ld		(de),a
0001CB 04                  A   117    	inc		b
0001CC 18 E6               A   118    	jr		innerlp
                           A   119    
                           A   120    
0001CE                     A   121    printbuff:
                           A   122    ;	push	bc		;preserve length
0001CE 11 4A 03            A   123    	ld		de,buffer
0001D1                     A   124    $$:
0001D1 1A                  A   125    	ld		a,(de)	
0001D2 D7                  A   126    	rst		10h
0001D3 13                  A   127    	inc		de
0001D4 10 FB               A   128    	djnz	$b
                           A   129    ;	pop		bc
                           A   130    ;now keep printing until unprintable again
0001D6                     A   131    allgood_lp
0001D6 CD 0C 02            A   132    	call	getbyte
0001D9 CD F7 01            A   133    	call	unprintable
0001DC 28 03               A   134    	jr		z,endstring
0001DE D7                  A   135    	rst		10h
0001DF 18 F5               A   136    	jr		allgood_lp	
0001E1                     A   137    endstring:
0001E1 CD 00 02            A   138    	call	inline_print
0001E4 0D0A00              A   139    	db		CR,LF,0		;newline at end - TEST
0001E7                     A   140    noprint:
                           A   141    	MOSCALL mos_feof	;check for end of file
0001EB B7                  A   142    	or		a
0001EC 28 B8               A   143    	jr		z,stringlp
0001EE                     A   144    donefile:
0001EE CD 00 02            A   145    	call	inline_print
0001F1 0D0A00              A   146    	db		CR,LF,0
0001F4 C3 8F 01            A   147    	jp		close
                           A   148    
                           A   149    
                           A   150    ; Entry:
                           A   151    ; A is a character to test
                           A   152    ; Exit:
                           A   153    ; Z flag is unprintable
0001F7                     A   154    unprintable:
0001F7 FE20                A   155    	cp	' '
0001F9 38 03               A   156    	jr	c,$f
0001FB FE7F                A   157    	cp	127
0001FD D8                  A   158    	ret	c	;always nz
0001FE AF                  A   159    $$:	xor	a	;sets 0 flag
0001FF C9                  A   160    	ret
                           A   161    ;
                           A   162    ; Prints string directly after the call
                           A   163    ;
000200 E1                  A   164    inline_print:	pop	hl
000201 CD 07 02            A   165    	call	print_string
000204 E9                  A   166    	jp	(hl)
                           A   167    ;
                           A   168    ; more efficient print string for strings > 1 c
000205                     A   169    $$:
000205 D7                  A   170    	rst	10h	;Agon uses this to print the charac
000206 23                  A   171    	inc	hl
000207 7E                  A   172    print_string:	ld	a,(hl)
000208 B7                  A   173    	or	a
000209 20 FA               A   174    	jr	nz,$b
00020B C9                  A   175    	ret
                           A   176    ;
                           A   177    ;
00020C                     A   178    getbyte:
00020C CD 18 02            A   179    	call	ck_ctrlC
00020F 3A 49 03            A   180    	ld	a,(in_handle)
000212 4F                  A   181    	ld	c,a
                           A   182    	MOSCALL mos_fgetc	;carry flag on last byt
000217 C9                  A   183    	ret
                           A   184    
                           A   185    ; Check for ctrl-C. If so, clean stack and exit
                           A   186    ;
000218                     A   187    ck_ctrlC:
000218 3E01                A   188    	ld	a,1		; modified below by self modify
00021A 3D                  A   189    	dec	a
00021B E60F                A   190    	and	15
00021D 32 19 02            A   191    	ld	(ck_ctrlC+1),a	; update LD A instructi
000220 C0                  A   192    	ret	nz		; check every 16 calls only
                           A   193    	MOSCALL	mos_sysvars	;get the sysvars locati
000225 5BDD7E19            A   194    	ld.lil	a,(IX+sysvar_vkeycount)	;check if a
000229 21 55 03            A   195    	ld	hl,keycount
00022C BE                  A   196    	cp	(hl)	;compare against keycount for c
00022D C8                  A   197    	ret	z
00022E 77                  A   198    	ld	(hl),a	;update keycount
00022F 5BDD7E05            A   199    	ld.lil	a,(IX+sysvar_keyascii)	;fetch char
000233 FE03                A   200    	cp	3	;is it ctr-C
000235 C0                  A   201    	ret	nz
000236 E1                  A   202    	pop	hl		;clean up stack
000237 E1                  A   203    	pop	hl
000238 C3 8F 01            A   204    	jp	close
                           A   205    
00023B CD 47 02            A   206    okusage:	call usage
00023E C3 95 01            A   207    	jp	exit
                           A   208    
000241 CD 47 02            A   209    badusage:	call usage
000244 C3 44 01            A   210    	jp	_err_invalid_param
                           A   211    ;
                           A   212    ; usage -- show syntax
                           A   213    ; 
000247 CD 00 02            A   214    usage:	call	inline_print
00024A 0D0A7374 72696E67   A   215    	db	CR,LF,'strings utility for Agon by Shaw
000252 73207574 696C6974 
00025A 7920666F 72204167 
000262 6F6E2062 79205368 
00026A 61776E20 53696A6E 
000272 73747261 2032332D 
00027A 4D61792D 32303233 
000282 0D0A0D0A 
000286 55736167 653A0D0A   A   216    	db	'Usage:',CR,LF
00028E 20202073 7472696E   A   217    	db	'   strings [-nX] <file>',CR,LF
000296 6773205B 2D6E585D 
00029E 203C6669 6C653E0D 
0002A6 0A 
0002A7 4F707469 6F6E616C   A   218    	db	'Optional parameter n specifies minimum
0002AF 20706172 616D6574 
0002B7 6572206E 20737065 
0002BF 63696669 6573206D 
0002C7 696E696D 756D2073 
0002CF 7472696E 67206C65 
0002D7 6E677468 20583D31 
0002DF 2E2E390D 0A 
0002E4 20446566 61756C74   A   219    	db  ' Default string length 4. Ctrl-C to ab
0002EC 20737472 696E6720 
0002F4 6C656E67 74682034 
0002FC 2E204374 726C2D43 
000304 20746F20 61626F72 
00030C 742E0D0A 
000310 53746F72 6520696E   A   220    	db 	'Store in /mos directory. Requires MOS 
000318 202F6D6F 73206469 
000320 72656374 6F72792E 
000328 20526571 75697265 
000330 73204D4F 5320312E 
000338 3033206F 72206C61 
000340 7465722E 0D0A00 
000347 C9                  A   221    	ret
                           A   222    
                           A   223    ;
                           A   224    ; data storage . . .
                           A   225    ;	
000348                     A   226    stringlength:
000348 04                  A   227    	db	4	;default of 4 characters
                           A   228    ; uninitialized storage/BSS but can't use that 
                           A   229    ;
                           A   230    ; RAM
                           A   231    ; 
                           A   232    			DEFINE	LORAM, SPACE = ROM
                           A   233    ;			ORDER	__VECTORS, CODE, LORAM
                           A   234    			SEGMENT LORAM
                           A   235    		
                           A   236    ;			SEGMENT	BSS
                           A   237    ;			SEGMENT CODE
                           A   238    
000349                     A   239    in_handle:	DS	1	;Only needs 1 byte handle
00034A                     A   240    buffer:		DS	10	;Space to buffer incoming s
000354                     A   241    curbyte:	DS	1	;current byte in the buffer
000355                     A   242    keycount:	DS	1	;current key count
                           A   243    	end


Errors: 0
Warnings: 0
Lines Assembled: 583
